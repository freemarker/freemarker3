<project name="docgen" default="all-but-javadoc">

<!--
Ant buildfile for building FreeMarker Documentation (fmdocs).
FreeMarker Documentation = Manual + API JavaDoc

$Id: build.xml,v 1.51 2004/03/13 21:08:19 ddekany Exp $
-->

<property file="build.properties"/>

<!-- Sources -->
<property name='docgen.manualsrc.dir' value='src/manual'/>
<property name='docgen.transformsrc.dir' value='src/transform'/>
<property name='docgen.eclipsetocsrc.dir' value='src/eclipse-toc'/>

<!-- Build directories -->
<property name='docgen.build.dir' value='build'/>
<property name='docgen.output.dir' value='${docgen.build.dir}/docs'/>
<property name='docgen.class.dir' value='${docgen.build.dir}/classes'/>
<property name='docgen.tmp.dir' value='${docgen.build.dir}/tmp'/>

<!-- default properties for transform task -->
<property name='docgen.transform.showEditorNotes' value='false'/>
<property name='docgen.transform.stopOnValidationError' value='true'/>
<property name='docgen.transform.outputWarnings' value='false'/>

<path id='docgen.classpath'>
    <pathelement path="${docgen.class.dir}" />
    <pathelement path="lib/freemarker.jar"/>
</path>

<target name="init">
    <tstamp/>
    <mkdir dir='${docgen.class.dir}'/>
    <javac
            srcdir="${docgen.transformsrc.dir}/java"
            destdir="${docgen.class.dir}"
            classpathref="docgen.classpath"
            deprecation="off"
            debug="on"
    />
</target>

<target name='all-but-javadoc' depends='init'>
  <!-- clean output dir, except javadoc -->
  <mkdir dir="${docgen.output.dir}"/>
  <delete includeEmptyDirs="yes">
      <fileset dir="${docgen.output.dir}" includes="**/*" excludes="api/"/>
  </delete>
    
  <antcall target="transform"/>
  
  <antcall target="eclipse-toc"/>
  
  <!-- copy literal files -->
  <mkdir dir="${docgen.output.dir}/images"/>
  <copy todir="${docgen.output.dir}/images">
      <fileset dir="${docgen.manualsrc.dir}/images"/>
  </copy>
  <copy todir="${docgen.output.dir}">
      <fileset dir="${docgen.transformsrc.dir}/static-output-files"/>
  </copy>
</target>

<!-- Tramsforms DocBook XML to HTML -->
<target name='transform' depends='init'>
    <taskdef name="transform" classname="DocgenTransformTask">
        <classpath refid="docgen.classpath"/>
    </taskdef>
    <transform
            templateDir="${docgen.transformsrc.dir}/ftl"
            srcFile="${docgen.manualsrc.dir}/freemarker-manual-db5.xml"
            outputDir="${docgen.output.dir}"
            showEditorNotes="${docgen.transform.showEditorNotes}"
            stopOnValidationError="${docgen.transform.stopOnValidationError}"
            outputWarnings="${docgen.transform.outputWarnings}"
    />
</target>

<!-- generates the Eclipse help ToC XML -->
<target name='eclipse-toc' if="docgen.offline">
    <taskdef name="freemarker" classname="freemarker.ext.ant.FreemarkerXmlTask">
        <classpath refid="docgen.classpath"/>
    </taskdef>
    <echo>Building table of content for Eclipse plugin.</echo>
    <mkdir dir="${docgen.tmp.dir}" />
    <!-- Build table of content for the Eclipse plugin -->
    <freemarker
            basedir="${docgen.manualsrc.dir}"
            destdir="${docgen.tmp.dir}"
            includes="freemarker-manual.xml"
            template="${docgen.eclipsetocsrc.dir}/eclipse-toc.ftl"
            encoding="iso-8859-1"
            incremental="no"
    />
    <!-- Copy and rename the toc generated for Eclipse help plugin -->  
    <move file="${docgen.tmp.dir}/freemarker-manual.html" 
    tofile="${docgen.output.dir}/eclipse-manual-toc.xml"/>
    <delete includeEmptyDirs="yes" dir="${docgen.tmp.dir}" />
</target>

<!-- javadoc part of the documentation -->
<target name='javadoc' depends='init'>
    <ant dir="../freemarker" target="javadoc"/>
    <delete dir="${docgen.output.dir}/api" />
    <copy todir="${docgen.output.dir}/api">
        <fileset dir="../freemarker/build/api" />
    </copy>
</target>

<target name='all' depends="clean">
    <antcall target="all-but-javadoc"/>
    <antcall target="javadoc"/>
</target>

<target name="pack">
    <tar tarfile="build/docgen.tar" basedir="${docgen.output.dir}"/>
    <gzip zipfile="build/docgen.tar.gz" src="build/docgen.tar"/>
    <delete file="build/docgen.tar"/>
</target>

<target name="clean">
    <delete dir="build"/>
</target>

</project>
