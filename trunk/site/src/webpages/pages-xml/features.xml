<?xml version="1.0" encoding="iso-8859-1"?>
<page title="Features">
  <headsection>
    <p>
      This page attempts to give you few highlights of FreeMarker features.
    </p>
  </headsection>
  <sections>
    <section title="General purpose">
      <ul>
        <li>Can be used to generate any kind of text: HTML, XML, RTF, Java source code, etc.</li>
        <li>Easy to embed into your product: Lightweight. Does not require servlet environment (does not depend on javax.servlet classes).</li>
        <li>Pluggable template loader: you can load templates from any sources; local files, database, etc.</li>
        <li>You can do whatever you want with the generated text: store it in a local file, send it as e-mail, send it back to a Web browser from a Web application, etc.</li>
      </ul>
    </section>
    
    <section title="Powerful template language">
      <ul>
        <li>All usual directives: include, if/elseif/else, loop constructs.</li>
        <li>Creating and changing variables in templates.</li>
        <li>Can use complex expressions to specify values almost everywhere.
          <ul>
            <li>String operations: concatenation, sub-string, uppercase, capitalize, escaping, etc.</li>
            <li>Decimal precision arithmetic calculations</li>
            <li>Boolean arithmetic</li>
            <li>Reading array and associative array elements</li>
            <li>Array and associative array literals</li>
            <li>You can add your own functions (methods) for special calculations.</li>
          </ul>
        </li>
        <li>Macros with named and positional parameters and with nested content (body). For example:<br/>
            <tt>&lt;@myMacro color="red" width=2>...&lt;/@myMacro></tt></li>
        <li>Name-spaces to help build and maintain reusable macro libraries or to divide big projects into separated modules, without worrying about name clashes.</li>
        <li>Output transformation blocks. Do transformations as HTML-escaping, compression, syntax-highlight etc. on the output generated by the nested template fragment. You can define your own transformations.</li>
      </ul>
    </section>
    
    <section title="Versatile data model">
      <p>FreeMarker does not work through direct reflection on Java objects; the Java objects are exposed to the template as variables through pluggable object wrappers. Thus, you can show the objects (Java beans, XML documents, SQL query result sets, etc.) in an abstract, tailored way for the template authors, without bothering them with technical details.</p>
    </section>
    
    <section title="Web-ready">
      <ul>
        <li>Built-in constructs in the template language to handle typical Web related tasks like HTML-escaping.</li>
        <li>Can be integrated with "Model 2" Web application frameworks out-of-the-box as JSP replacement.</li>
        <li><b>Supports JSP taglibs</b>.</li>
        <li>Designed for MVC pattern: separate visual design from application logic, separate page designers from programmers.</li>
      </ul>
    </section>
    
    <section title="Internationalization/localization aware">
      <ul>
        <li>Charset aware (uses UNICODE internally).</li>
        <li>Locale sensitive number formatting.</li>
        <li>Locale sensitive date and time formatting.</li>
        <li>Non-US characters can be used in identifiers (as variable names).</li>
        <li>Multiple variations of the same template for different languages.</li>
      </ul>
    </section>
    
    <section title="Powerful XML Processing Capabilities">
      <ul>
        <li>&lt;#recurse&gt; and &lt;#visit&gt; directives (new in version 2.3) for recursively walking an XML tree</li>
        <li>Clean, intuitive XML object model accessible from template.</li>
      </ul>
    </section>
    
    <section title="Comparing with other products">
      <p>
        You might also be interested 
        <a href="fmVsVel.html">what distinguish
        FreeMarker from Apache Velocity</a>.
      </p>
      
      <p>
        FreeMarker 2.3 often can be used as an alternative to XSLT. You can read our comparison <a href="fmVsXSLT.html">here</a>. 
      </p>
    </section>
  </sections>
</page>