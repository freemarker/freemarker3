<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="jar" name="freemarker"
  xmlns:f="http://freemarker.org/ant-build-tasks-xmlns">

    <!-- ================================================================== -->
    <!-- Properties and paths                                               -->
    <!-- ================================================================== -->

    <property name="libs.location" value="http://freemarker.sourceforge.net/jarsforbuild" />
    <property name="build.dir" location="build" />
    <property name="classes.dir" location="${build.dir}/classes" />
    <property file="src/freemarker/version.properties" />
    <property name="dist.dir" value="build/dist/freemarker-${version}" />
    <property name="site.dir" value="../../site" />

    <path id="build.class.path">
        <pathelement path="src" />
        <fileset dir="lib">
            <include name="*.jar" />
            <exclude name="jsp-api-1.2.jar" />
            <exclude name="jsp-api-2.0.jar" />
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Initialization                                                     -->
    <!-- ================================================================== -->

    <target name="fetchlibs" unless="all.libs.present"
            description="fetch build dependencies and put them in lib directory"
    >
        <mkdir dir="lib" />
        <echo>Fetching libraries from server.</echo>
        <get src="${libs.location}/README.txt" dest="lib/README.txt" usetimestamp="true" />
        <get src="${libs.location}/ant.jar" dest="lib/ant.jar" usetimestamp="true" />
        <get src="${libs.location}/backport-util-concurrent-3.1.jar" dest="lib/backport-util-concurrent-3.1.jar" usetimestamp="true" />
        <get src="${libs.location}/cavalry.jar" dest="lib/cavalry.jar" usetimestamp="true" />
        <!-- get src="${libs.location}/dom4j.jar" dest="lib/dom4j.jar" usetimestamp="true"/ -->
        <get src="${libs.location}/emma.jar" dest="lib/emma.jar" usetimestamp="true" />
        <get src="${libs.location}/emma_ant.jar" dest="lib/emma_ant.jar" usetimestamp="true" />
        <get src="${libs.location}/freemarker-bootstrap.jar" dest="lib/freemarker-bootstrap.jar" usetimestamp="true" />
        <get src="${libs.location}/javacc.jar" dest="lib/javacc.jar" usetimestamp="true" />
        <get src="${libs.location}/jaxen.jar" dest="lib/jaxen.jar" usetimestamp="true" />
        <!-- get src="${libs.location}/jdom.jar" dest="lib/jdom.jar" usetimestamp="true"/ -->
        <get src="${libs.location}/jruby.jar" dest="lib/jruby.jar" usetimestamp="true" />
        <get src="${libs.location}/js.jar" dest="lib/js.jar" usetimestamp="true" />
        <get src="${libs.location}/jsp-api-1.2.jar" dest="lib/jsp-api-1.2.jar" usetimestamp="true" />
        <get src="${libs.location}/jsp-api-2.0.jar" dest="lib/jsp-api-2.0.jar" usetimestamp="true" />
        <get src="${libs.location}/jsp-api-2.1.jar" dest="lib/jsp-api-2.1.jar" usetimestamp="true" />
        <get src="${libs.location}/junit.jar" dest="lib/junit.jar" usetimestamp="true" />
        <get src="${libs.location}/jython-2.2.1.jar" dest="lib/jython-2.2.1.jar" usetimestamp="true" />
        <get src="${libs.location}/kawadd.jar" dest="lib/kawadd.jar" usetimestamp="true" />
        <get src="${libs.location}/log4j.jar" dest="lib/log4j.jar" usetimestamp="true" />
        <get src="${libs.location}/retrotranslator-transformer-1.2.3.jar" dest="lib/retrotranslator-transformer-1.2.3.jar" usetimestamp="true" />
        <get src="${libs.location}/retrotranslator-runtime-1.2.3.jar" dest="lib/retrotranslator-runtime-1.2.3.jar" usetimestamp="true" />
        <get src="${libs.location}/saxpath.jar" dest="lib/saxpath.jar" usetimestamp="true" />
        <get src="${libs.location}/script.jar" dest="lib/script.jar" usetimestamp="true" />
        <get src="${libs.location}/servlet.jar" dest="lib/servlet.jar" usetimestamp="true" />
        <get src="${libs.location}/struts.jar" dest="lib/struts.jar" usetimestamp="true" />
        <get src="${libs.location}/xalan.jar" dest="lib/xalan.jar" usetimestamp="true" />
    </target>
   
    <target name="clean" description="get rid of all generated files">
        <delete dir="build" />
        <delete dir="docs" />
        <delete dir="retrobuild" />
        <delete file="src/freemarker/core/parser/FMParser.java" />
        <delete file="src/freemarker/core/parser/FMParserConstants.java" />
        <delete file="src/freemarker/core/parser/FMParserTokenManager.java" />
        <delete file="src/freemarker/core/parser/SimpleCharStream.java" />
        <delete file="src/freemarker/core/parser/Token.java" />
        <delete file="src/freemarker/core/parser/TokenMgrError.java" />
        <delete file="freemarker.jar" />
        <delete file="freemarker-14compat.jar" />
    </target>

    <target name="init"
            description="fetch dependencies if any are missing and create the build directory if necessary"
    >
        <mkdir dir="build" />
        <condition property="all.libs.present">
            <and>
                <available file="lib/ant.jar" />
                <available file="lib/cavalry.jar" />
                <!--available file="lib/dom4j.jar"/-->
                <available file="lib/emma.jar" />
                <available file="lib/emma_ant.jar" />
                <available file="lib/freemarker-bootstrap.jar" />
                <available file="lib/javacc.jar" />
                <available file="lib/jaxen.jar" />
                <!--available file="lib/jdom.jar"/-->
                <available file="lib/js.jar" />
                <available file="lib/jsp-api-1.2.jar" />
                <available file="lib/jsp-api-2.0.jar" />
                <available file="lib/jsp-api-2.1.jar" />
                <available file="lib/junit.jar" />
                <available file="lib/jython-2.2.1.jar" />
                <available file="lib/kawadd.jar" />
                <available file="lib/log4j.jar" />
                <available file="lib/retrotranslator-transformer-1.2.3.jar" />
                <available file="lib/retrotranslator-runtime-1.2.3.jar" />
                <available file="lib/backport-util-concurrent-3.1.jar" />
                <available file="lib/saxpath.jar" />
                <available file="lib/script.jar" />
                <available file="lib/servlet.jar" />
                <available file="lib/struts.jar" />
                <available file="lib/xalan.jar" />
            </and>
        </condition>
        <antcall target="fetchlibs" />
	<uptodate property="parser.gen"
                targetfile="src/freemarker/core/parser/FMParser.jj">
	    <srcfiles dir="src/freemarker/core/parser" includes="FMParser.java" />
	</uptodate>
    </target>

    <!-- ================================================================= -->
    <!-- Compilation                                                       -->
    <!-- ================================================================= -->

   <target name="javacc" depends="init"
            description="Build the JavaCC parser from its grammar file"
    >
        <javacc
                target="src/freemarker/core/parser/FMParser.jj"
                outputdirectory="src/freemarker/core/parser"
                javacchome="lib" jdkversion="1.5"
        />
   </target>
   
   <target name="kawadd" depends="init" if="parser.gen"
            description="Build the parser from its grammar file"
    >
        <java classname="kawadd.parser.Main"
                classpath="lib/kawadd.jar:lib/freemarker-bootstrap.jar"
                failonerror="true" fork="true"
        >
            <arg value="-OUTPUT_DIRECTORY=src/freemarker/core/parser" />
            <arg value="-JDK_VERSION=1.5" />
            <arg file="src/freemarker/core/parser/FMParser.jj" />
            <assertions><enable/></assertions>
 	</java>
   </target>
   
   <target name="compile" depends="kawadd">
   	<mkdir dir="${classes.dir}" />
        <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
                debug="on" optimize="off" target="1.5" source="1.5"
                classpathref="build.class.path"
                excludes="
                        freemarker/ext/jsp/FreeMarkerPageContext1.java, 
                        freemarker/ext/jsp/FreeMarkerPageContext2.java,
                        freemarker/ext/jsp/FreeMarkerJspFactory2.java"
        />
        <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
                debug="on" optimize="off" target="1.5" source="1.5"
                includes="freemarker/ext/jsp/FreeMarkerPageContext1.java">
            <classpath>
                <pathelement location="lib/jsp-api-1.2.jar" />
                <path refid="build.class.path" />
            </classpath>
        </javac>
        <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
                   debug="on" optimize="off" target="1.5" source="1.5"
                   includes="
                       freemarker/ext/jsp/FreeMarkerPageContext2.java,
                       freemarker/ext/jsp/FreeMarkerJspFactory2.java"
        >
            <classpath>
                <pathelement location="lib/jsp-api-2.0.jar" />
                <path refid="build.class.path" />
            </classpath>
        </javac>
        <rmic base="${classes.dir}" classpathref="build.class.path"
                includes="freemarker/debug/impl/Rmi*Impl.class"
                verify="yes" stubversion="1.2"
        />
   	<copy
                file="${classes.dir}/freemarker/core/SecureRendererImpl.class"
                tofile="${classes.dir}/freemarker/core/SecureRendererImpl.clazz"
        />
        <copy toDir="${classes.dir}">
            <fileset dir="src"
                excludes="**/CVS/**, **/*.bak, **/*.java, **/*.jj,
                        **/package.html, freemarker/testcase/**"
            />
        </copy>
   </target>
   
   <target name="jar" depends="compile">
        <jar 
            basedir="${classes.dir}" jarfile="freemarker.jar" 
            includes="freemarker/** META-INF/**" 
            excludes="freemarker/testcase/**, freemarker/core/SecureRendererImpl.class"
        >
            <manifest>
                <attribute name="Main-Class" value="freemarker.core.CommandLine" />
                <attribute name="Extension-name" value="FreeMarker" />
                <attribute name="Specification-Title" value="FreeMarker" />
                <attribute name="Specification-Version" value="${versionForMf}" />
                <attribute name="Specification-Vendor" value="freemarker.org" />
                <attribute name="Implementation-Title" value="FreeMarker" />
                <attribute name="Implementation-Version" value="${versionForMf}" />
                <attribute name="Implementation-Vendor" value="freemarker.org" />
            </manifest>
       </jar>
   </target>

    <!-- ================================================================= -->
    <!-- Testing                                                           -->
    <!-- ================================================================= -->

   <target name="test" depends="compile" description="Run test cases">
       <copy todir="${classes.dir}/freemarker/testcase">
           <fileset dir="src/freemarker/testcase" />
       </copy>
       <path id="emma.lib" >
           <pathelement location="lib/emma.jar" />
           <pathelement location="lib/emma_ant.jar" />
       </path>
       <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
       <property name="coverage.dir" location="${build.dir}/coverage" />
       <property name="coverage.classes.dir" location="${build.dir}/coverage/classes" />
       <mkdir dir="${coverage.classes.dir}" />
       <property name="coverage.instrumentationfile" location="${coverage.dir}/instrumentation" />
       <emma enabled="true">
           <instr 
               instrpath="${classes.dir}" outdir="${coverage.classes.dir}" 
               outfile="${coverage.instrumentationfile}" mode="copy">
               <filter excludes="*_Stub" />
       	   </instr>
       </emma>
       <copy todir="${coverage.classes.dir}">
           <fileset dir="src" excludes="**/*.java" />
       </copy>
       <copy todir="${coverage.classes.dir}">
           <fileset dir="${classes.dir}" />
       </copy>
       <property name="coverage.outfile" location="${coverage.dir}/coverage" />

   	<junit haltonfailure="off" fork="true">
           <sysproperty key="emma.coverage.out.file" value="${coverage.outfile}" />
       	   <classpath>
               <pathelement path="${coverage.classes.dir}" />
               <pathelement path="lib/emma.jar" />
               <path refid="build.class.path" />
           </classpath>
           <formatter type="plain" />
           <formatter type="xml" />
           <test
             name="freemarker.testcase.TemplateTestSuite"
             todir="build" />
       </junit>
   </target>
	
   <target name="test-coverage-report" depends="test">
       <property name="coverage.report.dir" location="${build.dir}/coverage/report" />
       <mkdir dir="${coverage.report.dir}" />
       <delete dir="${coverage.report.dir}" />
       <mkdir dir="${coverage.report.dir}" />
        <echo message="${coverage.outfile}" />
        <echo message="${coverage.instrumentationfile}" />
   	<emma enabled="true">
            <report>
                <fileset dir="${basedir}">
                    <include name="build/coverage/instrumentation" />
                    <include name="build/coverage/coverage" />
                </fileset>
                <sourcepath>
                    <dirset dir="${basedir}">
                        <include name="src" />
                    </dirset>
                </sourcepath>
		<html outfile="${coverage.report.dir}/index.html" />
		<xml outfile="${coverage.report.dir}/report.xml" />
            </report>
        </emma>
   </target>

    <!-- ================================================================= -->
    <!-- Retro stuff                                                       -->
    <!-- ================================================================= -->

   <target name="retrotest" description="Test against older JDK">
   	<echo message="You are testing against JDK version ${java.version}." />
	<echo message="Note that this test only makes sense against a JDK version inferior to 1.5" />
	<echo message="The error log will be put in the retrobuild directory." />
       <mkdir dir="retrobuild" />
       <copy todir="retrobuild/freemarker/testcase">
          <fileset dir="src/freemarker/testcase" excludes="*.class" />
       </copy>
       <junit haltonfailure="off" fork="true">
           <classpath>
             <pathelement path="retrobuild" />
             <path refid="build.class.path" />
           </classpath>
           <formatter type="plain" />
           <test
             name="freemarker.testcase.TemplateTestSuite"
             todir="retrobuild" />
       </junit>
   </target>
   
   <target name="retrotrans" depends="compile" description="Run Retrotranslator over the .class files">
       <mkdir dir="retrobuild" />
       <taskdef name="retrotranslator" classpathref="build.class.path"
           classname="net.sf.retrotranslator.transformer.RetrotranslatorTask" />
       <copy file="${classes.dir}/freemarker/core/SecureRendererImpl.clazz" tofile="retrobuild/freemarker/core/SecureRendererImpl.class" />
       
       <retrotranslator
          srcdir="build/classes" destdir="retrobuild"
          embed="freemarker.retrosupport"
          uptodatecheck="false"
       />
       <!-- Note: uptodatecheck="true" has randombly created empty jar-s -->
       
       <copy file="retrobuild/freemarker/core/SecureRendererImpl.class" tofile="retrobuild/freemarker/core/SecureRendererImpl.clazz" />
   </target>
   
    <target name="retrojar" depends="retrotrans" description="Build a .jar file that can be run under 1.4">
        <copy toDir="retrobuild">
          <fileset dir="src"
            excludes="**/CVS/**,**/*.bak,**/*.java,**/*.jj,**/package.html,freemarker/testcase/**" />
        </copy>
        <jar basedir="retrobuild" jarfile="freemarker-14compat.jar" excludes="eclipse/**,freemarker/testcase/**,TEST*,freemarker/core/SecureRendererImpl.class">
            <manifest>
                <attribute name="Main-Class" value="freemarker.core.CommandLine" />
                <attribute name="Extension-name" value="FreeMarker" />
                <attribute name="Specification-Title" value="FreeMarker" />
                <attribute name="Specification-Version" value="${versionForMf}" />
                <attribute name="Specification-Vendor" value="freemarker.org" />
                <attribute name="Implementation-Title" value="FreeMarker" />
                <attribute name="Implementation-Version" value="${versionForMf}" />
                <attribute name="Implementation-Vendor" value="freemarker.org" />
            </manifest>
        </jar>
    </target>


    <!-- ================================================================= -->
    <!-- JavaDoc                                                           -->
    <!-- ================================================================= -->

    <target depends="" name="javadoc" description="Build the JavaDocs" >
        <mkdir dir="${build.dir}/api" />
        <delete includeEmptyDirs="yes">
            <fileset dir="${build.dir}/api" includes="**/*" />
        </delete>
        <javadoc author="true"
                destdir="${build.dir}/api"
                doctitle="FreeMarker ${version}"
                packagenames="
                        freemarker.debug, freemarker.template.*,
                        freemarker.core.*, freemarker.ext.*,
                        freemarker.cache.*, freemarker.log.*"
                sourcepath="src"
                version="true"
                windowtitle="FreeMarker ${version} API"
                classpathref="build.class.path"
                use="true">
        </javadoc>
    </target>


    <!-- ====================== -->
    <!-- Distributuion building -->
    <!-- ====================== -->

    <target name="dist"
            description="Build the FreeMarker distribution files"
    >
        <antcall target="clean" />  <!-- To improve the reliability -->
        <antcall target="_dist" />
    </target>

    <target name="_dist"
            depends="jar, retrojar"
            description="(Used internally; don't call it)"
    >
        <!-- Copy jars and sources and such into the distro -->
        <delete dir="${dist.dir}" />
        <mkdir dir="${dist.dir}" />
        <copy todir="${dist.dir}" includeEmptyDirs="no">
            <fileset dir=".">
                <include name="examples/**" />
                <include name="src/**" />
                <include name="src/**" />
                <include name="examples/**" />
                <exclude name="**/.*/**" />
                <exclude name="**/.*" />
                <exclude name="**/*.bak" />
                <exclude name="**/*.~*" />
                <include name="build.xml" />
                <include name="*.txt" />
                <include name="*.jar" />
            </fileset>
        </copy>
        <replace
                file="${dist.dir}/README.txt"
                token="{version}"
                value="${version}"
        />

        <!-- Generate website pages and copy them into distro -->
        <ant dir="${site.dir}" target="all">
            <property name="site.offline" value="yes" />
        </ant>
        <copy todir="${dist.dir}/docs" includeEmptyDirs="no">
            <fileset dir="${site.dir}/build/site" />
        </copy>
        
        <!-- Generate manual pages and copy them into distro -->
        <ant dir="../docgen" target="all">
            <property name="docgen.offline" value="yes" />
        </ant>
        <copy todir="${dist.dir}/docs/docs" includeEmptyDirs="no">
            <fileset dir="../docgen/build/docs" />
        </copy>
        
        <!-- Package the distro -->
        <property name="freemarker.tar" value="build/freemarker-${version}.tar" />
        <property name="freemarker.gzip" value="${freemarker.tar}.gz" />
        <delete file="${freemarker.tar}" />
        <tar tarfile="${freemarker.tar}" basedir="${dist.dir}" />
        <delete file="${freemarker.gzip}" />
        <gzip zipfile="${freemarker.gzip}" src="${freemarker.tar}" />
        <delete file="${freemarker.tar}" />
    </target>

    <!-- ================================================================= -->
    <!-- [Add new section title here]                                      -->
    <!-- ================================================================= -->

 </project>
