<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="jar" name="freemarker">

   <property name="libs.location" value="http://freemarker.sourceforge.net/jarsforbuild"/>
   <property name="build.dir" location="build"/>
   <property name="classes.dir" location="${build.dir}/classes"/>
   <path id="build.class.path">
     <pathelement path="src"/>
     <fileset dir="lib">
       <include name="*.jar"/>
    </fileset>
   </path>

   <target name="fetchlibs" unless="all.libs.present" description="fetch build dependencies and put them in lib directory">
      <mkdir dir="lib"/>
      <echo>Fetching libraries from server.</echo>
      <get src="${libs.location}/README.txt" dest="lib/README.txt" usetimestamp="true"/>
      <get src="${libs.location}/ant.jar" dest="lib/ant.jar" usetimestamp="true"/>
      <get src="${libs.location}/backport-util-concurrent.jar" dest="lib/backport-util-concurrent.jar" usetimestamp="true"/>
      <get src="${libs.location}/cavalry.jar" dest="lib/cavalry.jar" usetimestamp="true"/>
      <!-- get src="${libs.location}/dom4j.jar" dest="lib/dom4j.jar" usetimestamp="true"/ -->
      <get src="${libs.location}/emma.jar" dest="lib/emma.jar" usetimestamp="true"/>
      <get src="${libs.location}/emma_ant.jar" dest="lib/emma_ant.jar" usetimestamp="true"/>
      <get src="${libs.location}/jarjar-0.7.jar" dest="lib/jarjar-0.7.jar" usetimestamp="true"/>
      <get src="${libs.location}/javacc.jar" dest="lib/javacc.jar" usetimestamp="true"/>
      <get src="${libs.location}/jaxen.jar" dest="lib/jaxen.jar" usetimestamp="true"/>
      <!-- get src="${libs.location}/jdom.jar" dest="lib/jdom.jar" usetimestamp="true"/ -->
      <get src="${libs.location}/js.jar" dest="lib/js.jar" usetimestamp="true"/>
      <get src="${libs.location}/junit.jar" dest="lib/junit.jar" usetimestamp="true"/>
      <get src="${libs.location}/jython.jar" dest="lib/jython.jar" usetimestamp="true"/>
      <get src="${libs.location}/log4j.jar" dest="lib/log4j.jar" usetimestamp="true"/>
      <get src="${libs.location}/retrotranslator.jar" dest="lib/retrotranslator.jar" usetimestamp="true"/>
      <get src="${libs.location}/retrotranslator-runtime-1.0.5.jar" dest="lib/retrotranslator-runtime-1.0.5.jar" usetimestamp="true"/>
      <get src="${libs.location}/saxpath.jar" dest="lib/saxpath.jar" usetimestamp="true"/>
      <get src="${libs.location}/script.jar" dest="lib/script.jar" usetimestamp="true"/>
      <get src="${libs.location}/servlet.jar" dest="lib/servlet.jar" usetimestamp="true"/>
      <get src="${libs.location}/xalan.jar" dest="lib/xalan.jar" usetimestamp="true"/>
   </target>
   
   <target name="clean" description="get rid of all generated files">
       <delete dir="build"/>
       <delete dir="docs"/>
       <delete dir="retrobuild"/>
       <delete file="src/freemarker/core/parser/FMParser.java" />
       <delete file="src/freemarker/core/parser/FMParserConstants.java" />
       <delete file="src/freemarker/core/parser/FMParserTokenManager.java" />
       <delete file="src/freemarker/core/parser/SimpleCharStream.java" />
       <delete file="src/freemarker/core/parser/Token.java" />
       <delete file="src/freemarker/core/parser/TokenMgrError.java" />
   </target>
   
   <target name="init" description="fetch dependencies if any are missing and create the build directory if necessary">
       <mkdir dir="build"/>
       <condition property="all.libs.present">
         <and>
            <available file="lib/ant.jar"/>
            <available file="lib/cavalry.jar"/>
            <!--available file="lib/dom4j.jar"/-->
            <available file="lib/emma.jar"/>
            <available file="lib/emma_ant.jar"/>
            <available file="lib/jarjar-0.7.jar"/>
            <available file="lib/javacc.jar"/>
            <available file="lib/jaxen.jar"/>
            <!--available file="lib/jdom.jar"/-->
            <available file="lib/js.jar"/>
            <available file="lib/junit.jar"/>
            <available file="lib/jython.jar"/>
            <available file="lib/log4j.jar"/>
            <available file="lib/retrotranslator.jar"/>
            <available file="lib/retrotranslator-runtime-1.0.5.jar"/>
            <available file="lib/backport-util-concurrent.jar"/>
            <available file="lib/saxpath.jar"/>
            <available file="lib/script.jar"/>
            <available file="lib/servlet.jar"/>
            <available file="lib/xalan.jar"/>
         </and>
       </condition>
       <antcall target="fetchlibs"/>
   </target>
   
   <target name="javacc" depends="init"
        description="Build the JavaCC parser from its grammar file">
        <javacc
	target="src/freemarker/core/parser/FMParser.jj"
	outputdirectory="src/freemarker/core/parser"
            javacchome="lib"
        />
        <replace
		file="src/freemarker/core/parser/FMParser.java"
              token="enum"
              value="ENUM"
        />
   </target>
   
   <target name="compile" depends="javacc">
   	<mkdir dir="${classes.dir}"/>
        <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
               debug="on" optimize="off" target="1.5" source="1.5"
               classpathref="build.class.path" />
        <rmic base="${classes.dir}" classpathref="build.class.path"
          includes="freemarker/debug/impl/Rmi*Impl.class" verify="yes" stubversion="1.2"/>
   	<copy file="${classes.dir}/freemarker/core/SecureRendererImpl.class" tofile="${classes.dir}/freemarker/core/SecureRendererImpl.clazz"/>
        <copy toDir="${classes.dir}">
          <fileset dir="src"
            excludes="**/CVS/**,**/*.bak,**/*.java,**/*.jj,**/package.html,freemarker/testcase/**"/>
        </copy>
   </target>
   
   <target name="jar" depends="compile">
        <jar 
            basedir="${classes.dir}" jarfile="freemarker.jar" 
            includes="freemarker/** META-INF/**" 
            excludes="freemarker/testcase/**,freemarker/core/SecureRendererImpl.class"
        >
            <manifest>
                <attribute name="Main-Class" value="freemarker.core.CommandLine" />
                <attribute name="Extension-name" value="FreeMarker" />
                <attribute name="Specification-Title" value="FreeMarker" />
                <attribute name="Specification-Version" value="${versionForMf}" />
                <attribute name="Specification-Vendor" value="freemarker.org" />
                <attribute name="Implementation-Title" value="FreeMarker" />
                <attribute name="Implementation-Version" value="${versionForMf}" />
                <attribute name="Implementation-Vendor" value="freemarker.org" />
            </manifest>
       </jar>
   </target>

   <target name="test" depends="compile" description="Run test cases">
       <copy todir="${classes.dir}/freemarker/testcase">
           <fileset dir="src/freemarker/testcase"/>
       </copy>
       <path id="emma.lib" >
           <pathelement location="lib/emma.jar" />
           <pathelement location="lib/emma_ant.jar" />
       </path>
       <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
       <property name="coverage.dir" location="${build.dir}/coverage"/>
       <property name="coverage.classes.dir" location="${build.dir}/coverage/classes"/>
       <mkdir dir="${coverage.classes.dir}"/>
       <property name="coverage.instrumentationfile" location="${coverage.dir}/instrumentation"/>
       <emma enabled="true">
           <instr 
               instrpath="${classes.dir}" outdir="${coverage.classes.dir}" 
               outfile="${coverage.instrumentationfile}" mode="copy">
               <filter excludes="*_Stub"/>
       	   </instr>
       </emma>
       <copy todir="${coverage.classes.dir}">
           <fileset dir="src" excludes="**/*.java"/>
       </copy>
       <copy todir="${coverage.classes.dir}">
           <fileset dir="${classes.dir}"/>
       </copy>
       <property name="coverage.outfile" location="${coverage.dir}/coverage"/>

   	<junit haltonfailure="off" fork="true">
           <sysproperty key="emma.coverage.out.file" value="${coverage.outfile}"/>
       	   <classpath>
               <pathelement path="${coverage.classes.dir}"/>
               <pathelement path="lib/emma.jar"/>
               <path refid="build.class.path"/>
           </classpath>
           <formatter type="plain"/>
           <formatter type="xml"/>
           <test
             name="freemarker.testcase.TemplateTestSuite"
             todir="build"/>
       </junit>
   </target>
	
   <target name="test-coverage-report" depends="test">
       <property name="coverage.report.dir" location="${build.dir}/coverage/report"/>
       <mkdir dir="${coverage.report.dir}"/>
       <delete dir="${coverage.report.dir}"/>
       <mkdir dir="${coverage.report.dir}"/>
        <echo message="${coverage.outfile}"/>
        <echo message="${coverage.instrumentationfile}"/>
   	<emma enabled="true">
            <report>
                <fileset dir="${basedir}">
                    <include name="build/coverage/instrumentation"/>
                    <include name="build/coverage/coverage"/>
                </fileset>
                <sourcepath>
                    <dirset dir="${basedir}">
                        <include name="src"/>
                    </dirset>
                </sourcepath>
                <html outfile="${coverage.report.dir}/index.html"/>
            </report>
        </emma>
   </target>
   
   <target name="retrotest" description="Test against older JDK">
   	<echo message="You are testing against JDK version ${java.version}."/>
	<echo message="Note that this test only makes sense against a JDK version inferior to 1.5"/>
	<echo message="The error log will be put in the retrobuild directory."/>
       <mkdir dir="retrobuild"/>
       <copy todir="retrobuild/freemarker/testcase">
          <fileset dir="src/freemarker/testcase" excludes="*.class"/>
       </copy>
       <junit haltonfailure="off" fork="true">
           <classpath>
             <pathelement path="retrobuild"/>
             <path refid="build.class.path"/>
           </classpath>
           <formatter type="plain"/>
           <test
             name="freemarker.testcase.TemplateTestSuite"
             todir="retrobuild"/>
       </junit>
   </target>
   
   <target name="retrotrans" depends="compile" description="Run Retrotranslator over the .class files">
       <mkdir dir="retrobuild"/>
       <taskdef name="retrotranslator" classpathref="build.class.path"
           classname="net.sf.retrotranslator.transformer.RetrotranslatorTask" />
       <copy file="${classes.dir}/freemarker/core/SecureRendererImpl.clazz" tofile="retrobuild/freemarker/core/SecureRendererImpl.class"/>
       <retrotranslator srcdir="build/classes" destdir="retrobuild"/>
       <copy file="retrobuild/freemarker/core/SecureRendererImpl.class" tofile="retrobuild/freemarker/core/SecureRendererImpl.clazz"/>
   </target>
   
   <target name="retrojar" depends="retrotrans" description="Build a .jar file that can be run under 1.4">
       <!-- TODO -->
       <unzip src="lib/backport-util-concurrent.jar" dest="retrobuild"/>
       <unzip src="lib/retrotranslator-runtime-1.0.5.jar" dest="retrobuild"/>
        <copy toDir="retrobuild">
          <fileset dir="src"
            excludes="**/CVS/**,**/*.bak,**/*.java,**/*.jj,**/package.html,freemarker/testcase/**"/>
        </copy>
    	<taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpath="lib/jarjar-0.7.jar"/>
        <jarjar basedir="retrobuild" jarfile="freemarker-14compat.jar" excludes="eclipse/**,freemarker/testcase/**,TEST*,freemarker/core/SecureRendererImpl.class">
            <manifest>
                <attribute name="Main-Class" value="freemarker.core.CommandLine" />
                <attribute name="Extension-name" value="FreeMarker" />
                <attribute name="Specification-Title" value="FreeMarker" />
                <attribute name="Specification-Version" value="${versionForMf}" />
                <attribute name="Specification-Vendor" value="freemarker.org" />
                <attribute name="Implementation-Title" value="FreeMarker" />
                <attribute name="Implementation-Version" value="${versionForMf}" />
                <attribute name="Implementation-Vendor" value="freemarker.org" />
            </manifest>
            <rule pattern="net.sf.retrotranslator.runtime.**" result="freemarker.retrosupport.@1"/>
            <rule pattern="edu.emory.mathcs.**" result="freemarker.retrosupport.@1"/>
       </jarjar>
   </target>
 </project>
