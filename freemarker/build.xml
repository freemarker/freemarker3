<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="jar" name="freemarker"
  xmlns:ivy="antlib:org.apache.ivy.ant"
  xmlns:freecc="http://visigoths.org/freecc"
  xmlns:docgen="http://freemarker.org/docgen"
  xmlns:emma="http://emma.sourceforge.net/emma"
  xmlns:retrotranslator="http://retrotranslator.sf.net/retrotranslator"
>

  <!-- ================================================================== -->
  <!-- Properties                                                         -->
  <!-- ================================================================== -->

  <!-- Ivy project coordinates: -->
  <property name="moduleOrg" value="org.freemarker" />
  <property name="moduleName" value="freemarker" />
  <property name="moduleBranch" value="2.4" />

  <!-- Will be overidden on the server: -->
  <property name="server.ivy.repo.root" value="${basedir}/build/dummy-server-ivy-repo" />
  
  <property file="build.properties"/>

  <!-- When boot.classpath is missing, this is the default: -->
  <property name="boot.classpath" value="${sun.boot.class.path}" />
  <!-- For checking the correctness of the boot.classpath -->
  <available classpath="${boot.classpath}"
    classname="java.lang.Object" ignoresystemclasses="true" 
    property="boot.classpath.correct"
  />
  
  <property name="classes.dir" location="build/classes" />
  <property file="src/freemarker/version.properties" />
  <property name="dist.dir" value="build/dist/freemarker-${version}" />
  <property name="site.dir" value="../../site" />
  <property name="docgen.dir" value="../../docgen" />
  
  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->
   
  <target name="clean" description="get rid of all generated files">
    <delete dir="build" />
    <delete dir="docs" />
    <delete dir="retrobuild" />
    <delete file="src/freemarker/core/parser/FMParser.java" />
    <delete file="src/freemarker/core/parser/FMConstants.java" />
    <delete file="src/freemarker/core/parser/FMLexer.java" />
    <delete file="src/freemarker/core/parser/LexicalException.java"/>
    <delete file="src/freemarker/core/parser/SimpleCharStream.java" />
    <delete file="src/freemarker/core/parser/Token.java" />
    <delete file="src/freemarker/core/parser/Node.java" />
    <delete file="freemarker.jar" />
    <delete file="freemarker-14compat.jar" />
  </target>

  <target name="init"
    description="fetch dependencies if any are missing and create the build directory if necessary"
  >
    <condition property="deps.available">
      <available file=".ivy" />
    </condition>
    <antcall target="_autoget-deps" />
    
    <mkdir dir="build"/>
    <uptodate property="parser.uptodate"
        targetfile="src/freemarker/core/parser/FMParser.java">
      <srcfiles dir="src/parser" includes="*.freecc" />
    </uptodate>
  </target>

  <!-- ================================================================= -->
  <!-- Compilation                                                       -->
  <!-- ================================================================= -->
  
  <target name="freecc" depends="init" unless="parser.uptodate"
    description="Build the parser from its grammar file"
  >
    <ivy:cachepath conf="parser" pathid="ivy.dep" />
    <taskdef
      name="generate" classname="org.visigoths.freecc.FreeCCAntTask"
      uri="http://visigoths.org/freecc" classpathref="ivy.dep"
    />

    <freecc:generate src="src/parser/FM.freecc"/> 
  </target>
   
  <target name="compile" depends="freecc">
    <fail unless="boot.classpath.correct"><!--
      -->The "boot.classpath" property value (${boot.classpath}) <!--
      -->seems to be an incorrect boot classpath. Please fix it in <!--
      -->the &lt;projectDir>/build.properties file, or wherever you <!--
      -->set it.<!--
    --></fail>
    <echo level="info">Using boot classpath: ${boot.classpath}</echo>

    <mkdir dir="${classes.dir}" />
    
    <!-- Note: the "build" conf includes JSP 1.2 and Servlet 2.3 API-s -->
    <ivy:cachepath conf="build" pathid="ivy.dep" />
    <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
      debug="on" optimize="off" target="1.5" source="1.5"
      classpathref="ivy.dep"
      bootclasspath="${boot.classpath}"
      excludes="
        freemarker/ext/jsp/,
        freemarker/ext/servlet/,
        freemarker/testcase/"
    />
    <!--
      When Attila has fixed the JSP support:
      excludes="
        freemarker/ext/jsp/FreeMarkerPageContext2.java,
        freemarker/ext/jsp/FreeMarkerJspFactory2.java,
        freemarker/ext/jsp/SimpleTagDirectiveModel.java,
        freemarker/ext/jsp/FreeMarkerPageContext21.java,
        freemarker/ext/jsp/FreeMarkerJspFactory21.java,
        freemarker/ext/jsp/FreeMarkerJspApplicationContext.java,
        freemarker/testcase/"
    -->
    
    <!--
    <ivy:cachepath conf="build.jsp2.0" pathid="ivy.dep.jsp2.0" />
    <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
      debug="on" optimize="off" target="1.5" source="1.5"
      classpathref="ivy.dep.jsp2.0"
      bootclasspath="${boot.classpath}"
      includes="
        freemarker/ext/servlet/,
        freemarker/ext/jsp/"
      excludes="
        freemarker/ext/jsp/FreeMarkerPageContext21.java,
        freemarker/ext/jsp/FreeMarkerJspFactory21.java,
        freemarker/ext/jsp/FreeMarkerJspApplicationContext.java"
    />
    -->
    <!--
      When Attila has fixed the JSP support:
      includes="
        freemarker/ext/jsp/SimpleTagDirectiveModel.java,
        freemarker/ext/jsp/FreeMarkerPageContext2.java,
        freemarker/ext/jsp/FreeMarkerJspFactory2.java"
    -->
    
    <ivy:cachepath conf="build.jsp2.1" pathid="ivy.dep.jsp2.1" />
    <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
      debug="on" optimize="off" target="1.5" source="1.5"
      classpathref="ivy.dep.jsp2.1"
      bootclasspath="${boot.classpath}"
      includes="
        freemarker/ext/jsp/,
        freemarker/ext/servlet/"
      excludes="
        freemarker/ext/jsp/FreeMarkerPageContext1.java,
        freemarker/ext/jsp/FreeMarkerPageContext2.java,
        freemarker/ext/jsp/FreeMarkerJspFactory2.java"
    />
    <!--
      When Attila has fixed the JSP support:
      includes="
        freemarker/ext/jsp/FreeMarkerPageContext21.java,
        freemarker/ext/jsp/FreeMarkerJspFactory21.java,
        freemarker/ext/jsp/FreeMarkerJspApplicationContext.java"
    -->
    
    <ivy:cachepath conf="build.test" pathid="ivy.dep.test" />
    <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
      debug="on" optimize="off" target="1.5" source="1.5"
      classpathref="ivy.dep.test"
      bootclasspath="${boot.classpath}"
      includes="
        freemarker/testcase/"
    />
    
    <rmic base="${classes.dir}" classpathref="ivy.dep"
      includes="freemarker/debug/impl/Rmi*Impl.class"
      verify="yes" stubversion="1.2"
    />
    <copy
      file="${classes.dir}/freemarker/core/SecureRendererImpl.class"
      tofile="${classes.dir}/freemarker/core/SecureRendererImpl.clazz"
    />
    <copy toDir="${classes.dir}">
      <fileset dir="src"
        excludes="
          **/CVS/**, **/*.bak, **/*.java, **/*.jj,
          **/package.html, freemarker/testcase/**"
      />
    </copy>
   </target>
   
   <target name="jar" depends="compile">
    <jar 
      basedir="${classes.dir}" jarfile="freemarker.jar" 
      includes="freemarker/** META-INF/**" 
      excludes="freemarker/testcase/**, freemarker/core/SecureRendererImpl.class"
    >
      <manifest>
        <attribute name="Main-Class" value="freemarker.core.CommandLine" />
        <attribute name="Extension-name" value="FreeMarker" />
        <attribute name="Specification-Title" value="FreeMarker" />
        <attribute name="Specification-Version" value="${versionForMf}" />
        <attribute name="Specification-Vendor" value="freemarker.org" />
        <attribute name="Implementation-Title" value="FreeMarker" />
        <attribute name="Implementation-Version" value="${versionForMf}" />
        <attribute name="Implementation-Vendor" value="freemarker.org" />
      </manifest>
     </jar>
     
     <!-- Needed for Ivy publish (it would overwrite the ivy.xml in the project root otherwise) -->
     <copy todir="build/artifacts">
      <fileset dir=".">
        <include name="*.jar" />
      </fileset>
     </copy>
   </target>

  <!-- ================================================================= -->
  <!-- Testing                                                           -->
  <!-- ================================================================= -->

   <target name="test" depends="compile" description="Run test cases">
    <ivy:cachepath conf="emma" pathid="ivy.dep.emma" />
    <taskdef
      resource="emma_ant.properties" classpathref="ivy.dep.emma"
      uri="http://emma.sourceforge.net/emma" 
    />
    
    <copy todir="${classes.dir}/freemarker/testcase">
      <fileset dir="src/freemarker/testcase" />
    </copy>
    <property name="coverage.dir" location="build/coverage" />
    <property name="coverage.classes.dir" location="build/coverage/classes" />
    <mkdir dir="${coverage.classes.dir}" />
    <property name="coverage.instrumentationfile" location="${coverage.dir}/instrumentation" />
    <emma:emma enabled="true">
      <instr 
        instrpath="${classes.dir}" outdir="${coverage.classes.dir}" 
        outfile="${coverage.instrumentationfile}" mode="copy">
        <filter excludes="*_Stub" />
      </instr>
    </emma:emma>
    <copy todir="${coverage.classes.dir}">
      <fileset dir="src" excludes="**/*.java" />
    </copy>
    <copy todir="${coverage.classes.dir}">
      <fileset dir="${classes.dir}" />
    </copy>
    <property name="coverage.outfile" location="${coverage.dir}/coverage" />
   
    <ivy:cachepath conf="test" pathid="ivy.dep.test" />
    <junit haltonfailure="off" fork="true">
      <sysproperty key="emma.coverage.out.file" value="${coverage.outfile}" />
      <classpath>
        <pathelement path="${coverage.classes.dir}" />
        <path refid="ivy.dep.emma" />
        <path refid="ivy.dep.test" />
      </classpath>
      <formatter type="plain" />
      <formatter type="xml" />
      <test
        name="freemarker.testcase.TemplateTestSuite"
        todir="build"
      />
    </junit>
   </target>
  
   <target name="test-coverage-report" depends="test">
    <ivy:cachepath conf="emma" pathid="ivy.dep.emma" />
    <taskdef
      resource="emma_ant.properties" classpathref="ivy.dep.emma"
      uri="http://emma.sourceforge.net/emma" 
    />
    
    <property name="coverage.report.dir" location="build/coverage/report" />
    <mkdir dir="${coverage.report.dir}" />
    <delete dir="${coverage.report.dir}" />
    <mkdir dir="${coverage.report.dir}" />
    <echo message="${coverage.outfile}" />
    <echo message="${coverage.instrumentationfile}" />
    <emma:emma enabled="true">
      <report>
        <fileset dir="${basedir}">
          <include name="build/coverage/instrumentation" />
          <include name="build/coverage/coverage" />
        </fileset>
        <sourcepath>
          <dirset dir="${basedir}">
            <include name="src" />
          </dirset>
        </sourcepath>
      <html outfile="${coverage.report.dir}/index.html" />
      <xml outfile="${coverage.report.dir}/report.xml" />
    </report>
    </emma:emma>
   </target>

  <!-- ================================================================= -->
  <!-- Retro stuff                                                       -->
  <!-- ================================================================= -->

  <target name="retrotest" description="Test against older JDK">
    <echo message="You are testing against JDK version ${java.version}." />
    <echo message="Note that this test only makes sense against a JDK version inferior to 1.5" />
    <echo message="The error log will be put in the retrobuild directory." />
    <mkdir dir="retrobuild" />
    <copy todir="retrobuild/freemarker/testcase">
      <fileset dir="src/freemarker/testcase" excludes="*.class" />
    </copy>
    <ivy:cachepath conf="test" pathid="ivy.dep" />
    <junit haltonfailure="off" fork="true">
      <classpath>
        <pathelement path="retrobuild" />
        <path refid="ivy.dep" />
      </classpath>
      <formatter type="plain" />
      <test
        name="freemarker.testcase.TemplateTestSuite"
        todir="retrobuild"
      />
    </junit>
  </target>

  <target name="retrotrans" depends="compile" description="Run Retrotranslator over the .class files">
    <ivy:cachepath conf="retrotranslate" pathid="ivy.dep" />
    <taskdef name="translate" classpathref="ivy.dep"
      classname="net.sf.retrotranslator.transformer.RetrotranslatorTask"
      uri="http://retrotranslator.sf.net/retrotranslator"
    />
      
    <mkdir dir="retrobuild" />
   
    <copy file="${classes.dir}/freemarker/core/SecureRendererImpl.clazz" tofile="retrobuild/freemarker/core/SecureRendererImpl.class" />
    
    <retrotranslator:translate
      srcdir="build/classes" destdir="retrobuild"
      embed="freemarker.retrosupport"
      uptodatecheck="false"
    />
    <!-- Note: uptodatecheck="true" has randombly created empty jar-s -->
    
    <copy file="retrobuild/freemarker/core/SecureRendererImpl.class" tofile="retrobuild/freemarker/core/SecureRendererImpl.clazz" />
  </target>
  <target name="retrojar" depends="retrotrans" description="Build a .jar file that can be run under 1.4">
    <copy toDir="retrobuild">
      <fileset dir="src"
        excludes="**/CVS/**,**/*.bak,**/*.java,**/*.jj,**/package.html,freemarker/testcase/**"
      />
    </copy>
    <jar basedir="retrobuild" jarfile="freemarker-14compat.jar" excludes="eclipse/**,freemarker/testcase/**,TEST*,freemarker/core/SecureRendererImpl.class,manual/**,parser/**">
      <manifest>
        <attribute name="Main-Class" value="freemarker.core.CommandLine" />
        <attribute name="Extension-name" value="FreeMarker" />
        <attribute name="Specification-Title" value="FreeMarker" />
        <attribute name="Specification-Version" value="${versionForMf}" />
        <attribute name="Specification-Vendor" value="freemarker.org" />
        <attribute name="Implementation-Title" value="FreeMarker" />
        <attribute name="Implementation-Version" value="${versionForMf}" />
        <attribute name="Implementation-Vendor" value="freemarker.org" />
      </manifest>
    </jar>
  </target>


  <!-- ================================================================= -->
  <!-- Generate docs                                                     -->
  <!-- ================================================================= -->

  <target depends="freecc" name="javadoc" description="Build the JavaDocs" >
    <!-- depends="freecc" is needed as its output is referred in the docs. -->
    <mkdir dir="build/api" />
    <delete includeEmptyDirs="yes">
      <fileset dir="build/api" includes="**/*" />
    </delete>
    <ivy:cachepath conf="build.jsp2.1" pathid="ivy.dep" />
    <javadoc
      sourcepath="src"
      destdir="build/api"
      doctitle="FreeMarker ${version}"
      packagenames="
        freemarker.debug, freemarker.template.*,
        freemarker.core.*, freemarker.ext.*,
        freemarker.cache.*, freemarker.log.*"
      use="true"
      version="true"
      author="true"
      windowtitle="FreeMarker ${version} API"
      classpathref="ivy.dep"
    />
  </target>

  <target name="manual" depends="init" description="Build the Manual" >
    <ivy:cachepath conf="manual" pathid="ivy.dep" />
    <taskdef resource="org/freemarker/docgen/antlib.properties"
      uri="http://freemarker.org/docgen"
      classpathref="ivy.dep"
    />
    
    <docgen:transform
      srcdir="src/manual" destdir="build/manual"
      generateEclipseToC="true"
    />
  </target>

  
  <!-- ====================== -->
  <!-- Distributuion building -->
  <!-- ====================== -->

  <target name="dist"
    description="Build the FreeMarker distribution files"
  >
    <antcall target="clean" />  <!-- To improve the reliability -->
    <antcall target="_dist" />
  </target>

  <target name="_dist"
    depends="jar, retrojar, javadoc, manual"
    description="(Used internally; don't call it)"
  >
    <!-- Copy jars and sources and such into the distro -->
    <delete dir="${dist.dir}" />
    <mkdir dir="${dist.dir}" />
    <copy todir="${dist.dir}" includeEmptyDirs="no">
      <fileset dir=".">
        <include name="examples/**" />
        <include name="src/**" />
        <include name="src/**" />
        <include name="examples/**" />
        <exclude name="**/.*/**" />
        <exclude name="**/.*" />
        <exclude name="**/*.bak" />
        <exclude name="**/*.~*" />
        <include name="build.xml" />
        <include name="ivy.xml" />
        <include name="ivysettings.xml" />
        <include name="*.txt" />
        <include name="*.jar" />
      </fileset>
    </copy>
    <replace
      file="${dist.dir}/README.txt"
      token="{version}"
      value="${version}"
    />

    <!-- Generate website pages and copy them into distro -->
    <ivy:retrieve conf="site" pattern="build/[artifact].[ext]" />
    <untar compression="gzip" src="build/site.tar.gz" dest="${dist.dir}/docs" />

    <!-- Copy Manual -->
    <copy todir="${dist.dir}/docs/docs" includeEmptyDirs="no">
      <fileset dir="build/manual" />
    </copy>
    
    <!-- Copy javadocs -->
    <copy todir="${dist.dir}/docs/docs/api" includeEmptyDirs="no">
      <fileset dir="build/api" />
    </copy>
    
    <!-- Package the distro -->
    <property name="freemarker.tar" value="build/freemarker-${version}.tar" />
    <property name="freemarker.gzip" value="${freemarker.tar}.gz" />
    <delete file="${freemarker.tar}" />
    <tar tarfile="${freemarker.tar}" basedir="${dist.dir}" />
    <delete file="${freemarker.gzip}" />
    <gzip zipfile="${freemarker.gzip}" src="${freemarker.tar}" />
    <delete file="${freemarker.tar}" />
  </target>
  
  <!--
    Uploads the freemarker.jar that is in the current DISTRIBUTION DIRECTORY
    into the place that the central Maven2 repository syncs itself with
    periodically. Of course it also uploads the Maven-specific metadata files.
    
    Use this after "dist" (without interleaving "clean").
  
    Note: maven-ant-tasks-x.x.x.jar must be added to ${ANT_HOME}/lib for
      this to work. Get it here: http://maven.apache.org/download.html
  -->
  <target name="maven-upload" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <echo file="build/pom.xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
      <project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>org.freemarker</groupId>
        <artifactId>freemarker</artifactId>
        <version>${version}</version>
        <packaging>jar</packaging>
        <name>FreeMarker</name>
        <description>
        FreeMarker is a "template engine"; a generic tool to generate text output based on templates.
        </description>
        <url>http://freemarker.org</url>
        <licenses>
        <license>
          <name>BSD-style license</name>
          <url>http://freemarker.org/LICENSE.txt</url>
        </license>
        </licenses>
        <scm>
        <url>http://freemarker.svn.sourceforge.net/viewvc/freemarker/</url>
        <connection>scm:svn:https://freemarker.svn.sourceforge.net/svnroot/freemarker</connection>
        </scm>
        <dependencies>
        <!-- no required dependencies -->
        </dependencies>
      </project>
    ]]></echo>
    
    <jar destfile="build/maven-source-attachment.jar"
         basedir="src" excludes="freemarker/testcase/**"
    />
   
    <artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
   
    <input
       validargs="y,n"
       addproperty="mavenUpload.answer"
    >
You are about uploading
${dist.dir.versioned}/freemarker.jar
into the Maven central repostiry sync. directory.
Be sure that's the final (released) variation there,
and that the version number is correct.
Proceed? </input>
    <condition property="mavenUpload.yes">
      <equals arg1="y" arg2="${mavenUpload.answer}"/>
    </condition>
    <fail unless="mavenUpload.yes" message="Task aborted by user." />
   
    <input
      message="Enter your SourceForge.net user name: "
      addproperty="mavenUpload.user"
    />
    <input
      message="Enter your SourceForge.net password (WILL BE DISPLAYED AS YOU TYPE IT!): "
      addproperty="mavenUpload.password"
    />
   
    <artifact:deploy file="${dist.dir}/freemarker.jar">
      <remoteRepository url="sftp://web.sourceforge.net/home/groups/f/fr/freemarker/htdocs/maven2">
        <authentication
            username="${mavenUpload.user},freemarker"
            password="${mavenUpload.password}"
         />
      </remoteRepository>
      <pom file="build/pom.xml" />
      <attach file="build/maven-source-attachment.jar" classifier="sources" />
    </artifact:deploy>
    
    <echo>**********************************************</echo>
    <echo>CLEAR THE SCREEN, NOW! Your password is on it!</echo>
    <echo>**********************************************</echo>
  </target>

  <target name="artifacts" depends="jar"
    description="Creates the artifacts for Ivy."
  />
  
  
  <!-- ================================================================== -->
  <!-- Dependency management (keep it exactly identical for all projects) -->
  <!-- ================================================================== -->
  
  <target name="_autoget-deps" unless="deps.available">
    <antcall target="update-deps" />
  </target>
  
  <target name="update-deps"
    description="Gets the latest version of the dependencies from the Web"
  >
    <echo>Getting dependencies...</echo>
    <echo>-------------------------------------------------------</echo>
    <ivy:settings id="remote" url="http://freemarker.org/repos/ivy/ivysettings-remote.xml" />
    <!-- Build an own repository that will serve us even offline: -->
    <ivy:retrieve settingsRef="remote" sync="true"
      ivypattern=".ivy.part/repo/[organisation]/[module]/ivy-[revision].xml"
      pattern=".ivy.part/repo/[organisation]/[module]/[artifact]-[revision].[ext]"
    />
    <echo>-------------------------------------------------------</echo>
    <echo>*** Successfully acquired dependencies from the Web ***</echo>
    <echo>Eclipse users: Now right-click on ivy.xml and Resolve! </echo>
    <echo>-------------------------------------------------------</echo>
    <!-- Only now that we got all the dependencies will we delete anything. -->
    <!-- Thus a net or repo outage doesn't left us without the dependencies. -->

    <!-- Save the resolution cache from the soon coming <delete>: -->
    <move todir=".ivy.part/update-deps-reso-cache">
      <fileset dir=".ivy/update-deps-reso-cache" />
    </move>
    <!-- Drop all the old stuff: -->
    <delete dir=".ivy" />
    <!-- And use the new stuff instead: -->
    <move todir=".ivy">
      <fileset dir=".ivy.part" />
    </move>
  </target>

  <!-- Do NOT call this from 'clean'; offline guys would stuck after that. -->
  <target name="clean-deps"
    description="Deletes all dependencies"
  >
    <delete dir=".ivy" />
  </target>

  <target name="publish-override" depends="artifacts"
    description="Ivy-publishes THIS project locally as an override"
  >
    <ivy:resolve />
    <ivy:publish
      pubrevision="${moduleBranch}-branch-head"
      overwrite="true" forcedeliver="true"
      resolver="freemarker-devel-local-override"
    >
      <artifacts pattern="build/artifacts/[artifact].[ext]" />
    </ivy:publish>
    <echo>-------------------------------------------------------</echo>
    <echo>*** Don't forget to `ant unpublish-override` later! ***</echo>
  </target>

  <target name="unpublish-override"
    description="Undoes publish-override (made in THIS project)"
  >
    <delete dir="${user.home}/.ivy2/freemarker-devel-local-override/${moduleOrg}/${moduleName}" />
    <delete dir="${user.home}/.ivy2/freemarker-devel-local-override-cache/${moduleOrg}/${moduleName}" />
  </target>  

  <target name="unpublish-override-all"
    description="Undoes publish-override-s made in ALL projects"
  >
    <delete dir="${user.home}/.ivy2/freemarker-devel-local-override" />
    <delete dir="${user.home}/.ivy2/freemarker-devel-local-override-cache" />
  </target>  

  <target name="uninstall"
    description="Deletes external files created by FreeMarker developement"
  >
    <delete dir="${user.home}/.ivy2/freemarker-devel-cache" />
    <delete dir="${user.home}/.ivy2/freemarker-devel-local-override" />
    <delete dir="${user.home}/.ivy2/freemarker-devel-local-override-cache " />
  </target>

  <target name="report-deps"
    description="Creates a HTML document that summarizes the dependencies."
  >
    <mkdir dir="build/deps-report" />
    <ivy:resolve />
    <ivy:report todir="build/deps-report" />
  </target>
  
  <!--
    This meant to be called on the Continuous Integration server, so the
    integration builds appear in the freemarker.org public Ivy repository.
    The artifacts must be already built.
  -->
  <target name="server-publish-last-build"
    description="(For the Continuous Integration server only)"
  >
    <delete dir="build/dummy-server-ivy-repo" />
    <ivy:resolve />
    <ivy:publish
      pubrevision="${moduleBranch}-branch-head"
      overwrite="true" forcedeliver="true"
      resolver="server-publishing-target"
    >
      <artifacts pattern="build/artifacts/[artifact].[ext]" />
    </ivy:publish>
  </target>
  
</project>
