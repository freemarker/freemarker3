<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="jar" name="freemarker"
        xmlns:freecc="http://visigoths.org/freecc"
        xmlns:docgen="http://freemarker.org/docgen"
        xmlns:ivy="antlib:org.apache.ivy.ant"
>

    <!-- ================================================================== -->
    <!-- Properties and paths                                               -->
    <!-- ================================================================== -->

    <property file="build.properties"/>

    <property name="libs.location" value="http://freemarker.sourceforge.net/jarsforbuild" />
    <property name="build.dir" location="build" />
    <property name="classes.dir" location="${build.dir}/classes" />
    <property file="src/freemarker/version.properties" />
    <property name="dist.dir" value="build/dist/freemarker-${version}" />
    <property name="site.dir" value="../../site" />
    <property name="docgen.dir" value="../../docgen" />

    <path id="build.class.path">
        <pathelement path="src" />
        <fileset dir="lib">
            <include name="*.jar" />
            <exclude name="jsp-api-1.2.jar" />
            <exclude name="jsp-api-2.0.jar" />
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Initialization                                                     -->
    <!-- ================================================================== -->
   
    <target name="clean" description="get rid of all generated files">
        <delete dir="build" />
        <delete dir="docs" />
        <delete dir="retrobuild" />
        <delete file="src/freemarker/core/parser/FMParser.java" />
        <delete file="src/freemarker/core/parser/FMConstants.java" />
        <delete file="src/freemarker/core/parser/FMLexer.java" />
        <delete file="src/freemarker/core/parser/LexicalException.java"/>
        <delete file="src/freemarker/core/parser/SimpleCharStream.java" />
        <delete file="src/freemarker/core/parser/Token.java" />
        <delete file="src/freemarker/core/parser/Node.java" />
        <delete file="freemarker.jar" />
        <delete file="freemarker-14compat.jar" />
    </target>

    <target name="init"
            description="fetch dependencies if any are missing and create the build directory if necessary"
    >
        <mkdir dir="build"/>
        <uptodate property="parser.uptodate"
                targetfile="src/freemarker/core/parser/FMParser.java">
            <srcfiles dir="src/parser" includes="*.freecc" />
        </uptodate>
        <ivy:settings url="http://freemarker.org/repos/ivy/fm-ivysettings.xml" id="fm.instance" />
    </target>

    <!-- ================================================================= -->
    <!-- Compilation                                                       -->
    <!-- ================================================================= -->
   <target name="freecc" depends="init" unless="parser.uptodate"
            description="Build the parser from its grammar file"
    >
           <ivy:retrieve settingsRef="fm.instance" conf="parser" pattern="lib/[artifact].[ext]"/>
           <taskdef name="generate" classname="org.visigoths.freecc.FreeCCAntTask"
                   uri="http://visigoths.org/freecc"
                   classpath="lib/freecc.jar:lib/freemarker-bootstrap.jar"
           />
        <freecc:generate src="src/parser/FM.freecc"/> 
   </target>
   
   <target name="compile" depends="freecc">
       <ivy:retrieve settingsRef="fm.instance" conf="build"/>
       <mkdir dir="${classes.dir}" />
        <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
                debug="on" optimize="off" target="1.5" source="1.5"
                classpathref="build.class.path"
                excludes="
                        freemarker/ext/jsp/FreeMarkerPageContext1.java, 
                        freemarker/ext/jsp/FreeMarkerPageContext2.java,
                        freemarker/ext/jsp/FreeMarkerJspFactory2.java"
        />
        <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
                debug="on" optimize="off" target="1.5" source="1.5"
                includes="freemarker/ext/jsp/FreeMarkerPageContext1.java">
            <classpath>
                <pathelement location="lib/jsp-api-1.2.jar" />
                <path refid="build.class.path" />
            </classpath>
        </javac>
        <javac srcdir="src" destdir="${classes.dir}" deprecation="off" 
                   debug="on" optimize="off" target="1.5" source="1.5"
                   includes="
                       freemarker/ext/jsp/FreeMarkerPageContext2.java,
                       freemarker/ext/jsp/FreeMarkerJspFactory2.java"
        >
            <classpath>
                <pathelement location="lib/jsp-api-2.0.jar" />
                <path refid="build.class.path" />
            </classpath>
        </javac>
        <rmic base="${classes.dir}" classpathref="build.class.path"
                includes="freemarker/debug/impl/Rmi*Impl.class"
                verify="yes" stubversion="1.2"
        />
       <copy
                file="${classes.dir}/freemarker/core/SecureRendererImpl.class"
                tofile="${classes.dir}/freemarker/core/SecureRendererImpl.clazz"
        />
        <copy toDir="${classes.dir}">
            <fileset dir="src"
                excludes="**/CVS/**, **/*.bak, **/*.java, **/*.jj,
                        **/package.html, freemarker/testcase/**"
            />
        </copy>
   </target>
   
   <target name="jar" depends="compile">
        <jar 
            basedir="${classes.dir}" jarfile="freemarker.jar" 
            includes="freemarker/** META-INF/**" 
            excludes="freemarker/testcase/**, freemarker/core/SecureRendererImpl.class"
        >
            <manifest>
                <attribute name="Main-Class" value="freemarker.core.CommandLine" />
                <attribute name="Extension-name" value="FreeMarker" />
                <attribute name="Specification-Title" value="FreeMarker" />
                <attribute name="Specification-Version" value="${versionForMf}" />
                <attribute name="Specification-Vendor" value="freemarker.org" />
                <attribute name="Implementation-Title" value="FreeMarker" />
                <attribute name="Implementation-Version" value="${versionForMf}" />
                <attribute name="Implementation-Vendor" value="freemarker.org" />
            </manifest>
       </jar>
   </target>

    <!-- ================================================================= -->
    <!-- Testing                                                           -->
    <!-- ================================================================= -->

   <target name="test" depends="compile" description="Run test cases">
       <copy todir="${classes.dir}/freemarker/testcase">
           <fileset dir="src/freemarker/testcase" />
       </copy>
          <ivy:retrieve settingsRef="fm.instance" conf="emma" pattern="lib/[artifact].[ext]"/>
       <path id="emma.lib" >
           <pathelement location="lib/emma.jar" />
           <pathelement location="lib/emma_ant.jar" />
       </path>
       <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
       <property name="coverage.dir" location="${build.dir}/coverage" />
       <property name="coverage.classes.dir" location="${build.dir}/coverage/classes" />
       <mkdir dir="${coverage.classes.dir}" />
       <property name="coverage.instrumentationfile" location="${coverage.dir}/instrumentation" />
       <emma enabled="true">
           <instr 
               instrpath="${classes.dir}" outdir="${coverage.classes.dir}" 
               outfile="${coverage.instrumentationfile}" mode="copy">
               <filter excludes="*_Stub" />
              </instr>
       </emma>
       <copy todir="${coverage.classes.dir}">
           <fileset dir="src" excludes="**/*.java" />
       </copy>
       <copy todir="${coverage.classes.dir}">
           <fileset dir="${classes.dir}" />
       </copy>
       <property name="coverage.outfile" location="${coverage.dir}/coverage" />

       <junit haltonfailure="off" fork="true">
           <sysproperty key="emma.coverage.out.file" value="${coverage.outfile}" />
              <classpath>
               <pathelement path="${coverage.classes.dir}" />
               <pathelement path="lib/emma.jar" />
               <path refid="build.class.path" />
           </classpath>
           <formatter type="plain" />
           <formatter type="xml" />
           <test
             name="freemarker.testcase.TemplateTestSuite"
             todir="build" />
       </junit>
   </target>
    
   <target name="test-coverage-report" depends="test">
       <property name="coverage.report.dir" location="${build.dir}/coverage/report" />
       <mkdir dir="${coverage.report.dir}" />
       <delete dir="${coverage.report.dir}" />
       <mkdir dir="${coverage.report.dir}" />
        <echo message="${coverage.outfile}" />
        <echo message="${coverage.instrumentationfile}" />
       <emma enabled="true">
            <report>
                <fileset dir="${basedir}">
                    <include name="build/coverage/instrumentation" />
                    <include name="build/coverage/coverage" />
                </fileset>
                <sourcepath>
                    <dirset dir="${basedir}">
                        <include name="src" />
                    </dirset>
                </sourcepath>
        <html outfile="${coverage.report.dir}/index.html" />
        <xml outfile="${coverage.report.dir}/report.xml" />
            </report>
        </emma>
   </target>

    <!-- ================================================================= -->
    <!-- Retro stuff                                                       -->
    <!-- ================================================================= -->

   <target name="retrotest" description="Test against older JDK">
       <echo message="You are testing against JDK version ${java.version}." />
    <echo message="Note that this test only makes sense against a JDK version inferior to 1.5" />
    <echo message="The error log will be put in the retrobuild directory." />
       <mkdir dir="retrobuild" />
       <copy todir="retrobuild/freemarker/testcase">
          <fileset dir="src/freemarker/testcase" excludes="*.class" />
       </copy>
       <junit haltonfailure="off" fork="true">
           <classpath>
             <pathelement path="retrobuild" />
             <path refid="build.class.path" />
           </classpath>
           <formatter type="plain" />
           <test
             name="freemarker.testcase.TemplateTestSuite"
             todir="retrobuild" />
       </junit>
   </target>

   <target name="retrotrans" depends="compile" description="Run Retrotranslator over the .class files">
       <ivy:retrieve settingsRef="fm.instance" conf="build1.4"/>
       <mkdir dir="retrobuild" />

       <taskdef name="retrotranslator" classpathref="build.class.path"
           classname="net.sf.retrotranslator.transformer.RetrotranslatorTask" />
       <copy file="${classes.dir}/freemarker/core/SecureRendererImpl.clazz" tofile="retrobuild/freemarker/core/SecureRendererImpl.class" />
       
       <retrotranslator
          srcdir="build/classes" destdir="retrobuild"
          embed="freemarker.retrosupport"
          uptodatecheck="false"
       />
       <!-- Note: uptodatecheck="true" has randombly created empty jar-s -->
       
       <copy file="retrobuild/freemarker/core/SecureRendererImpl.class" tofile="retrobuild/freemarker/core/SecureRendererImpl.clazz" />
   </target>
    <target name="retrojar" depends="retrotrans" description="Build a .jar file that can be run under 1.4">
        <copy toDir="retrobuild">
          <fileset dir="src"
            excludes="**/CVS/**,**/*.bak,**/*.java,**/*.jj,**/package.html,freemarker/testcase/**" />
        </copy>
        <jar basedir="retrobuild" jarfile="freemarker-14compat.jar" excludes="eclipse/**,freemarker/testcase/**,TEST*,freemarker/core/SecureRendererImpl.class,manual/**,parser/**">
            <manifest>
                <attribute name="Main-Class" value="freemarker.core.CommandLine" />
                <attribute name="Extension-name" value="FreeMarker" />
                <attribute name="Specification-Title" value="FreeMarker" />
                <attribute name="Specification-Version" value="${versionForMf}" />
                <attribute name="Specification-Vendor" value="freemarker.org" />
                <attribute name="Implementation-Title" value="FreeMarker" />
                <attribute name="Implementation-Version" value="${versionForMf}" />
                <attribute name="Implementation-Vendor" value="freemarker.org" />
            </manifest>
        </jar>
    </target>


    <!-- ================================================================= -->
    <!-- Generate docs                                                     -->
    <!-- ================================================================= -->

    <target depends="" name="javadoc" description="Build the JavaDocs" >
        <mkdir dir="${build.dir}/api" />
        <delete includeEmptyDirs="yes">
            <fileset dir="${build.dir}/api" includes="**/*" />
        </delete>
        <javadoc author="true"
                destdir="${build.dir}/api"
                doctitle="FreeMarker ${version}"
                packagenames="
                        freemarker.debug, freemarker.template.*,
                        freemarker.core.*, freemarker.ext.*,
                        freemarker.cache.*, freemarker.log.*"
                sourcepath="src"
                version="true"
                windowtitle="FreeMarker ${version} API"
                classpathref="build.class.path"
                use="true">
        </javadoc>
    </target>

    <target depends="" name="manual" description="Build the Manual" >
        <ivy:retrieve settingsRef="fm.instance" conf="manual" pattern="lib/[artifact].[ext]"/>
        <taskdef resource="org/freemarker/docgen/antlib.properties"
                    uri="http://freemarker.org/docgen"
                    classpath="lib/docgen.jar:freemarker.jar"
        />
        <docgen:transform
            srcdir="src/manual" destdir="${build.dir}/manual"
            generateEclipseToC="true"
            showXXELogo="true"
        />
    </target>

    <!-- ====================== -->
    <!-- Distributuion building -->
    <!-- ====================== -->

    <target name="dist"
            description="Build the FreeMarker distribution files"
    >
        <antcall target="clean" />  <!-- To improve the reliability -->
        <antcall target="_dist" />
    </target>

    <target name="_dist"
            depends="jar, retrojar, javadoc, manual"
            description="(Used internally; don't call it)"
    >
        <!-- Copy jars and sources and such into the distro -->
        <delete dir="${dist.dir}" />
        <mkdir dir="${dist.dir}" />
        <copy todir="${dist.dir}" includeEmptyDirs="no">
            <fileset dir=".">
                <include name="examples/**" />
                <include name="src/**" />
                <include name="src/**" />
                <include name="examples/**" />
                <exclude name="**/.*/**" />
                <exclude name="**/.*" />
                <exclude name="**/*.bak" />
                <exclude name="**/*.~*" />
                <include name="build.xml" />
                <include name="*.txt" />
                <include name="*.jar" />
            </fileset>
        </copy>
        <replace
                file="${dist.dir}/README.txt"
                token="{version}"
                value="${version}"
        />

        <!-- Generate website pages and copy them into distro -->
        <ivy:retrieve conf="site" pattern="build/[artifact].[ext]" />
        <untar compression="gzip" src="build/site.tar.gz" dest="${dist.dir}/docs" />

        <!-- Copy Manual -->
        <copy todir="${dist.dir}/docs/docs" includeEmptyDirs="no">
            <fileset dir="${build.dir}/manual" />
        </copy>
        
        <!-- Copy javadocs -->
        <copy todir="${dist.dir}/docs/docs/api" includeEmptyDirs="no">
            <fileset dir="${build.dir}/api" />
        </copy>
        
        <!-- Package the distro -->
        <property name="freemarker.tar" value="build/freemarker-${version}.tar" />
        <property name="freemarker.gzip" value="${freemarker.tar}.gz" />
        <delete file="${freemarker.tar}" />
        <tar tarfile="${freemarker.tar}" basedir="${dist.dir}" />
        <delete file="${freemarker.gzip}" />
        <gzip zipfile="${freemarker.gzip}" src="${freemarker.tar}" />
        <delete file="${freemarker.tar}" />
    </target>
    
    <!--
      Uploads the freemarker.jar that is in the current DISTRIBUTION DIRECTORY
      into the place that the central Maven2 repository syncs itself with
      periodically. Of course it also uploads the Maven-specific metadata files.
      
      Use this after "dist" (without interleaving "clean").
  
      Note: maven-ant-tasks-x.x.x.jar must be added to ${ANT_HOME}/lib for
            this to work. Get it here: http://maven.apache.org/download.html
    -->
    <target name="maven-upload" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
        <echo file="build/pom.xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
            <project xmlns="http://maven.apache.org/POM/4.0.0"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
              <modelVersion>4.0.0</modelVersion>
              <groupId>org.freemarker</groupId>
              <artifactId>freemarker</artifactId>
              <version>${version}</version>
              <packaging>jar</packaging>
              <name>FreeMarker</name>
              <description>
                FreeMarker is a "template engine"; a generic tool to generate text output based on templates.
              </description>
              <url>http://freemarker.org</url>
              <licenses>
                <license>
                  <name>BSD-style license</name>
                  <url>http://freemarker.org/LICENSE.txt</url>
                </license>
              </licenses>
              <scm>
                <url>http://freemarker.svn.sourceforge.net/viewvc/freemarker/</url>
                <connection>scm:svn:https://freemarker.svn.sourceforge.net/svnroot/freemarker</connection>
              </scm>
              <dependencies>
                <!-- no required dependencies -->
              </dependencies>
            </project>
        ]]></echo>
        
        <jar destfile="build/maven-source-attachment.jar"
               basedir="src" excludes="freemarker/testcase/**"
        />
   
        <artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
   
        <input
             validargs="y,n"
             addproperty="mavenUpload.answer"
        >
You are about uploading
${dist.dir.versioned}/freemarker.jar
into the Maven central repostiry sync. directory.
Be sure that's the final (released) variation there,
and that the version number is correct.
Proceed? </input>
        <condition property="mavenUpload.yes">
            <equals arg1="y" arg2="${mavenUpload.answer}"/>
        </condition>
        <fail unless="mavenUpload.yes" message="Task aborted by user." />
   
        <input
               message="Enter your SourceForge.net user name: "
               addproperty="mavenUpload.user"
       />
        <input
               message="Enter your SourceForge.net password (WILL BE DISPLAYED AS YOU TYPE IT!): "
               addproperty="mavenUpload.password"
       />
   
        <artifact:deploy file="${dist.dir}/freemarker.jar">
            <remoteRepository url="sftp://web.sourceforge.net/home/groups/f/fr/freemarker/htdocs/maven2">
                <authentication
                      username="${mavenUpload.user},freemarker"
                      password="${mavenUpload.password}"
               />
            </remoteRepository>
            <pom file="build/pom.xml" />
            <attach file="build/maven-source-attachment.jar" classifier="sources" />
        </artifact:deploy>
        
        <echo>**********************************************</echo>
        <echo>CLEAR THE SCREEN, NOW! Your password is on it!</echo>
        <echo>**********************************************</echo>
    </target>

    <!-- ================================================================= -->
    <!-- [Add new section title here]                                      -->
    <!-- ================================================================= -->

 </project>
