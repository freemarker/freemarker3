/*
 * Copyright (c) 2020, Jonathan Revusky revusky@freemarker.es
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and  the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
options
{
   BASE_SRC_DIR="..";
   PARSER_PACKAGE="freemarker.core.parser";
   TREE_BUILDING_ENABLED=false;
}

INJECT(PARSER_CLASS) : 
{
    import freemarker.core.ast.*;
    import freemarker.template.*;
    import freemarker.template.utility.StringUtil;
    import java.io.*;
    import java.util.*;
    import java.security.CodeSource;
}
{

// Necessary for adding macros and setting location info.
  Template template;
  private String templateName;

  private boolean stripText;
// variables that keep track of whether we are in a loop or a switch.
  private int contentNesting; // for stripText
  private int trimBlockNesting;
  
  /**
   * Create an FM expression parser using a string.
   */
  static public FMParser createExpressionParser(String s) {
//      SimpleCharStream scs = new SimpleCharStream(new StringReader(s), 1, 1, 16*s.length());
      FMLexer lexer = new FMLexer(new StringReader(s));
      lexer.SwitchTo(FMConstants.EXPRESSION);
      return new FMParser(lexer);
  }
  
  /**
   * Constructs a new parser object.
   * @param template The template associated with this parser.
   * @param reader The character stream to use as input
   */
  public FMParser(Template template, Reader reader) {
      this(reader);
      this.template = template;
      this.templateName = template != null ? template.getName() : "";
      token_source.templateName = templateName;
      token_source.input_stream.setTabSize(1);
  }
  
  public FMParser(Template template, Reader reader, int syntaxSetting) {
  	  this(template, reader);
  	  if (syntaxSetting != Configuration.AUTO_DETECT_TAG_SYNTAX) {
  	  	   token_source.setAltDirectiveSyntax(syntaxSetting==Configuration.SQUARE_BRACKET_TAG_SYNTAX);
  	  }
  }
  
  public FMParser(Template template, String input, int syntaxSetting) {
  	  this(template, new StringReader(input), syntaxSetting); 
  }
  
  public void setTemplate(Template t) {
      this.template = t;
  }
  
  private String getErrorStart(Token t) {
      return "Error in template: " + template.getName()
            + "\non line " + t.beginLine + ", column " + t.beginColumn;
  }
  
  public boolean isSyntaxSet() {
  	  return token_source.directiveSyntaxEstablished;
  }
  
  public boolean isAltDirectiveSyntax() {
  	  return token_source.altDirectiveSyntax;
  }
  
  /**
   * Used in error recovery, scans forward for a 
   * token of a given kind, and optionally consumes it.
   * @return the token right before the one of the kind
   *         that we were scanning ahead for
   */
  
  private Token recoverToToken(int kind, boolean consume) {
  	  Token t = this.current_token, prevToken;
  	  do {
  	  	prevToken = t;
  	  	t = getNextToken();
  	  } while (t.kind != kind && t.kind != EOF);
  	  if (!consume) {
  	  	this.current_token = prevToken;
  	  }
	  return prevToken;
  }
}


/**
 * The lexer portion defines 5 lexical states:
 * DEFAULT, NO_PARSE, EXPRESSION, EXPRESSION_COMMENT, 
 * NO_SPACE_EXPRESSION
 * The lexer is in the DEFAULT state when it is 
 * just consuming regular text, but are scanning for
 * FreeMarker constructs. NO_PARSE is the simplest state.
 * We are consuming text, but ignoring FreeMarker constructs,
 * so ${x} or [#if..] are just treated as plain text.
 * EXPRESSION is the state you are in
 * when the parser wants a FreeMarker expression.
 * So, for example, you enter the EXPRESSION state
 * right after a ${ and leave it after the matching }.
 * Or, you enter the EXPRESSION state right after
 * an "<#if" and then, when you hit the matching ">"
 * that ends the if directive, you go back to DEFAULT lexical state.
 * Note that whitespace is ignored in the
 * EXPRESSION statep but is passed through to the parser as PCDATA 
 * in the DEFAULT state. EXPRESSION_COMMENT is a lexical state
 * we are in if for comments within an FTL expression.
 * NO_SPACE_EXPRESSION is a slight variant on the EXPRESSION state. 
 * It basically exists as a kludge to deal with a nasty
 * little corner in FTL syntax. In NO_SPACE_EXPRESSION,
 * spaces are not ignored, so a whitespace token effectively ends
 * the parsing of an expression. THus, for example, [@x (y+1)/]
 * is parsed as the macro x with the single argument (y+1) rather than
 * the macro x(y+1) with no args.
 */

INJECT(LEXER_CLASS) : 
{
   import freemarker.template.utility.StringUtil;
}
{

/**
  The noparseType is set when we enter
  a block of text that the parser more or less ignores.
  These are <noparse> and <comment>. This variable
  tells us what the closing tag should be, and when
  we hit that, we resume parsing. Note that with this
  scheme, <comment> and <noparse> tags cannot nest
  recursively, but it is not clear how important that is.
*/
    private int noparseType;

/**
    Keeps track of how deeply nested
    we have the hash literals.
    This is necessary since we need to be
    able to distinguish the } used to close
    a hash literal and the one used to
    close a ${
 */
 private int hashLiteralNesting;
 private int parenthesisNesting;
 private int bracketNesting;
 boolean onlyTextOutput, 
         directiveSyntaxEstablished, 
         altDirectiveSyntax,
         inInvocation,
         justAfterDot;
 String templateName;
 
 public void setOnlyTextOutput(boolean b) {
     this.onlyTextOutput = b;
 }
 
 void setAltDirectiveSyntax(boolean b) {
    altDirectiveSyntax = b;
    directiveSyntaxEstablished = true;
 }
 
 
 private void CommonTokenAction(Token token) {
 	if (token.kind == EOF) return;
 	String tokText = token.image;
 	char firstChar = tokText.charAt(0);
 	if (justAfterDot) {
 		if (StringUtil.isFTLIdentifier(tokText) || tokText.equals("*") || tokText.equals("**")) {
 			token.kind = ID;
 			return;
 		} 
 	}
 	if (firstChar == '[' || firstChar=='<') {
 		String chopFirst = tokText.substring(1);
 		if (chopFirst.startsWith("#") || chopFirst.startsWith("/#")
 		    || chopFirst.startsWith("@") || chopFirst.startsWith("/@")) {
 			if (this.onlyTextOutput) {
 				token.kind = PRINTABLE_CHARS;
 				return;
 			}
	 		boolean squareBracket = firstChar == '[';
 			if (!directiveSyntaxEstablished) {
 				setAltDirectiveSyntax(squareBracket);
 			} 
 			else if (altDirectiveSyntax != squareBracket) {
 				token.kind = PRINTABLE_CHARS;
 				return;
 			}
 			if (token.kind == UNKNOWN_DIRECTIVE) {
    	      int index = tokText.indexOf('#');
        	  String s = tokText.substring(index);
              String msg = "Unknown directive: " 
                        + s
                        + " on line: " + token.beginLine
                        + ", column: " + token.beginColumn +1
                        + ", in template: " + templateName;
          	  throw new RuntimeException(msg); // REVISIT
 			}
 		}
 	}
  	switch(token.kind) {
  		case FTL_HEADER : 
          SwitchTo(EXPRESSION);
          break;
        case GREATER_THAN_EQUALS : 
  		case GREATER_THAN:
			if (parenthesisNesting == 0 && !altDirectiveSyntax) {
				if (token.kind == GREATER_THAN_EQUALS) {
					input_stream.backup(1); // So that the = doesn't get eaten.
				} 
				token.kind = DIRECTIVE_END;
				SwitchTo(DEFAULT);
			}
			break;
		case OPEN_PAREN :
			parenthesisNesting++;
			SwitchTo(EXPRESSION);
			break;
		case CLOSE_PAREN : 
			parenthesisNesting--;
			break;
  		case OPEN_BRACKET:
  			bracketNesting++;
  			break;
  		case CLOSE_BRACKET : 
            if (bracketNesting >0) {
        	   --bracketNesting;
            } else {
            	token.kind=DIRECTIVE_END;
        		SwitchTo(DEFAULT);
            }   
            break; 
        case OPEN_BRACE :
        	++hashLiteralNesting;
        	break;
        case CLOSE_BRACE :
        	if (hashLiteralNesting >0) {
        		--hashLiteralNesting;
        	} else {
        		SwitchTo(DEFAULT);
        	}
        	break;
  		case UNIFIED_CALL:
  			SwitchTo(NO_SPACE_EXPRESSION);
  			break;
		case NOPARSE: 
			noparseType = NOPARSE;
			SwitchTo(NO_PARSE); 
			break; 		
 		case TERSE_COMMENT: 
 			noparseType = TERSE_COMMENT;
 			SwitchTo(NO_PARSE); 
 			break;
 		case COMMENT: 
 			noparseType = COMMENT;
 			SwitchTo(NO_PARSE); 
 			break;
 		case NOPARSE_END:
 			if (noparseType != NOPARSE) {
 				token.kind = PRINTABLE_CHARS;
 				break;
 			} // deliberate fall-through to next case...
 		case COMMENT_END:
 			if (token.kind == COMMENT_END && noparseType != COMMENT) {
	 			token.kind = PRINTABLE_CHARS;
 			} else {
 				char lastChar = tokText.charAt(tokText.length() -1);
 				char startTagChar = lastChar == ']' ? '[' : '<';
 				String extraChars = tokText.substring(0, tokText.lastIndexOf(startTagChar));
 				if (extraChars.length() >0) {
 					token.image = extraChars;
 					input_stream.backup(tokText.length() - extraChars.length());
 					token.kind = PRINTABLE_CHARS;
 				} else {
		 			SwitchTo(DEFAULT);
 				}
 			}
 			break;
 		case TERSE_COMMENT_END:
 			if (noparseType != TERSE_COMMENT) {
 				token.kind = PRINTABLE_CHARS;
 			}
 			else if (tokText.length() == 3) {
 				SwitchTo(DEFAULT);
 			}
 			else {
		 		token.image = tokText.substring(0, tokText.length() -3);
		 		input_stream.backup(3);
	 		 	token.kind = PRINTABLE_CHARS;
 			}
 			break;
  		case FUNCTION: case MACRO: case PARAM: case NESTED: case TRANSFORM: case STOP: case RETURN: case CALL:
  		case IF: case ELSE_IF: 
  		case VISIT: case RECURSE: 
 		case VAR: case SET: case ASSIGN: case LOCALASSIGN: case GLOBALASSIGN:
 		case LIST: case FOREACH:
 		case SWITCH: case CASE:
 		case _INCLUDE: case IMPORT: case EMBED:  
  		case ESCAPE: case SETTING: 
 			SwitchTo(EXPRESSION);
 	}
 }
 }

TOKEN:
{
    <#BLANK : [" ", "\t", "\n", "\r"]>
    |
    <#START_TAG : "<#" | "[#">
    |
    <#CLOSE_TAG1 : (<BLANK>)* (">" | "]")>
    |
    <#CLOSE_TAG2 : (<BLANK>)* ("/")? (">" | "]")>
    |
    <CLOSE_DIRECTIVE_BLOCK : ("[/#" (~["]"])* "]") | ("</#" (~[">"])* ">")> 
    |
    <ATTEMPT : <START_TAG> "attempt" <CLOSE_TAG1>> 
    |
    <RECOVER : <START_TAG> "recover" <CLOSE_TAG1>>
    |
    <BLOCKTRIM : <START_TAG> "t_lines" <CLOSE_TAG1>>
    |
    <BLOCKTRIML : <START_TAG> "lt_lines" <CLOSE_TAG2>>
    |
    <BLOCKTRIMR : <START_TAG> "rt_lines" <CLOSE_TAG1>>
    |
    <BLOCKNOTRIM : <START_TAG> "nt_lines" <CLOSE_TAG1>>
    |
    <IF : <START_TAG> "if" <BLANK>> 
    |
    <ELSE_IF : <START_TAG> "elseif" <BLANK>>
    |
    <LIST : <START_TAG> "list" <BLANK>> 
    |
    <FOREACH : <START_TAG> "foreach" <BLANK>> 
    |
    <SWITCH : <START_TAG> "switch" <BLANK>>
    |
    <CASE : <START_TAG> "case" <BLANK>> 
    |
    <ASSIGN : <START_TAG> "assign" <BLANK>>
    |
    <GLOBALASSIGN : <START_TAG> "global" <BLANK>> 
    |
    <LOCALASSIGN : <START_TAG> "local" <BLANK>> 
    |
    <SET : <START_TAG> "set" <BLANK>>
    |
    <_INCLUDE : <START_TAG> "include" <BLANK>> 
    |
    <IMPORT : <START_TAG> "import" <BLANK>> 
    |
    <FUNCTION : <START_TAG> "function" <BLANK>> 
    |
    <MACRO : <START_TAG> "macro" <BLANK>>
    |
    <PARAM : <START_TAG> "param" <BLANK>> 
    |
    <TRANSFORM : <START_TAG> "transform" <BLANK>> 
    |
    <VISIT : <START_TAG> "visit" <BLANK>> 
    |
    <STOP : <START_TAG> "stop" <BLANK>> 
    |
    <RETURN : <START_TAG> "return" <BLANK>> 
    |
    <CALL : <START_TAG> "call" <BLANK>> 
    |
    <SETTING : <START_TAG> "setting" <BLANK>> 
    |
    <EMBED : <START_TAG> "embed" <BLANK>> 
    |
    <VAR : <START_TAG> "var"  <BLANK>>
    |
    <COMPRESS : <START_TAG> "compress" <CLOSE_TAG1>> 
    |
    <COMMENT : <START_TAG> "comment" <CLOSE_TAG1>> 
    |
    <TERSE_COMMENT : ("<" | "[") "#--" >
    |
    <NOPARSE : <START_TAG> "noparse" <CLOSE_TAG1>> 
    |
    <ELSE : <START_TAG> "else" <CLOSE_TAG2>> 
    |
    <BREAK : <START_TAG> "break" <CLOSE_TAG2>> 
    |
    <SIMPLE_RETURN : <START_TAG> "return" <CLOSE_TAG2>>
    |
    <HALT : <START_TAG> "stop" <CLOSE_TAG2>> 
    |
    <FLUSH : <START_TAG> "flush" <CLOSE_TAG2>> 
    |
    <TRIM : <START_TAG> "t" <CLOSE_TAG2>> 
    |
    <LTRIM : <START_TAG> "lt" <CLOSE_TAG2>> 
    |
    <RTRIM : <START_TAG> "rt" <CLOSE_TAG2>> 
    |
    <NOTRIM : <START_TAG> "nt" <CLOSE_TAG2>> 
    |
    <DEFAUL : <START_TAG> "default" <CLOSE_TAG1>> 
    |
    <SIMPLE_NESTED : <START_TAG> "nested" <CLOSE_TAG2>> 
    |
    <NESTED : <START_TAG> "nested" <BLANK>> 
    |
    <SIMPLE_RECURSE : <START_TAG> "recurse" <CLOSE_TAG2>>
    |
    <RECURSE : <START_TAG> "recurse" <BLANK>>
    |
    <FALLBACK : <START_TAG> "fallback" <CLOSE_TAG2>> 
    |
    <ESCAPE : <START_TAG> "escape" <BLANK>> 
    |
    <NOESCAPE : <START_TAG> "noescape" <CLOSE_TAG1>> 
    |
    <UNIFIED_CALL : "<@" | "[@" > 
    |
    <UNIFIED_CALL_END : ("<" | "[") "/@" ((<ID>) ("."<ID>)*)? <CLOSE_TAG1>> 
    |
    <FTL_HEADER : ("<#ftl" | "[#ftl") <BLANK>>
    |
    <TRIVIAL_FTL_HEADER : ("<#ftl" | "[#ftl") ("/")? (">" | "]")>
    |
    <UNKNOWN_DIRECTIVE : ("[#" | "[/#" | "<#" | "</#") (["a"-"z","A"-"Z", "_"])+>
}

<DEFAULT, NODIRECTIVE> TOKEN :
{
    <WHITESPACE : (["\t", " ", "\r", "\n"])+>
    |
    <PRINTABLE_CHARS : ("$" | "#" | "<" | "[" | "{") 
                      | (~["$", "<", "#", "[", "{", "\n", "\r", "\t", " "])+>
    |
    <OUTPUT_ESCAPE : "${" > : EXPRESSION
    |
    <NUMERICAL_ESCAPE : "#{" > : EXPRESSION
}

<EXPRESSION> SKIP :
{
    < ( " " | "\t" | "\n" | "\r" )+ >
    |
    < ["<", "["]  ["#", "!"] "--"> : EXPRESSION_COMMENT
}

<EXPRESSION_COMMENT> SKIP:
{
    < ~[] >  
    |
    < "-->"> : EXPRESSION
    |
    < "--]" > : EXPRESSION
}

<EXPRESSION, NO_SPACE_EXPRESSION> TOKEN :
{
  <STRING_LITERAL :
      ("\"" 
          ((~["\\", "\""]) | ("\\" ~[]))*      
      "\"")
      |
      ("'"
          ((~["\\", "'"]) | ("\\" ~[]))*            
      "'")
  > 
  |
  <RAW_STRING : "r" (("\"" (~["\""])* "\"") | ("'" (~["'"])* "'"))>
  |
  <FALSE : "false">
  |
  <TRUE : "true">
  |
  <NULL : "null">
  |
  <INTEGER : (["0"-"9"])+>
  |
  <DECIMAL : <INTEGER> "." <INTEGER>>
  |
  <DOT : ".">
  |
  <DOT_DOT : "..">
  |
  <BUILT_IN : "?">
  |
  <EXISTS : "??">
  |
  <EQUALS : "=">
  |
  <DOUBLE_EQUALS : "==">
  |
  <NOT_EQUALS : "!=">
  |
  <GREATER_THAN : ">">
  |
  <GREATER_THAN_EQUALS: ">=">
  |
  <EMPTY_DIRECTIVE_END : "/>" | "/]"> :DEFAULT
  |
  <LESS_THAN : "lt" | "<" | "&lt;">
  |
  <LESS_THAN_EQUALS : "lte" | "<=" | "&lt;=">
  |
  <ESCAPED_GT: "gt" | "\\gt" |  "&gt;">
  |
  <ESCAPED_GTE : "gte" | "\\gte" | "&gt;=">
  |
  <PLUS : "+">
  |
  <MINUS : "-">
  |
  <TIMES : "*">
  |
  <DOUBLE_STAR : "**">
  |
  <ELLIPSIS : "...">
  |
  <DIVIDE : "/">
  |
  <PERCENT : "%">
  |
  <AND : "&" | "&&" >
  |
  <OR : "|" | "||">
  |
  <EXCLAM : "!">
  |
  <COMMA : ",">
  |
  <SEMICOLON : ";">
  |
  <COLON : ":">
  |
  <OPEN_BRACKET : "[">
  |
  <CLOSE_BRACKET : "]"> 
  |
  <OPEN_PAREN : "(">
  |
  <CLOSE_PAREN : ")">
  |
  <OPEN_BRACE : "{" > 
  |
  <CLOSE_BRACE : "}" >
  |
  <IN : "in">
  |
  <AS : "as">
  |
  <USING : "using">
 
}

<NO_SPACE_EXPRESSION> TOKEN :
{
    <TERMINATING_WHITESPACE :  (["\n", "\r", "\t", " "])+> : EXPRESSION
}



<NO_PARSE> MORE: { <(~[])> }

<NO_PARSE> TOKEN :
{
	<TERSE_COMMENT_END : "-->" | "--]">
	|
    <COMMENT_END : ("</#comment" (<BLANK>)* ">") | ("[/#comment" (<BLANK>)* "]")>
    |
    <NOPARSE_END : ("</#noparse" (<BLANK>)* ">") | ("[/#noparse" (<BLANK>)* "]")>
}

<PHONY> TOKEN: {<DIRECTIVE_END : ">"|"]">}

// Now the actual parsing code, starting
// with the productions for FreeMarker's
// expression syntax.

/**
 * An Expression production with error recovery
 * The start Token is the token just before the expression
 * we are trying to parse, the recoverToType is 
 * the kind of token to scan ahead for to recover from 
 * errors, and the boolean consumeToken
 * says whether to consume the recoverToken or not.
 */

Expression Expression(Token start, int recoverToType, boolean consumeToken) :
{
   Expression exp = null;
   Token end;
}
{
   try {
	   exp=OrExpression()
   } catch (ParseException pe) {
   	   String msg = "invalid expression";
       Token t = this.current_token, prevToken;
       do {
  	  	   prevToken = t;
		   t = getNextToken();
 	   } while (t.kind != recoverToType && t.kind != EOF);
       if (!consumeToken) {
  	  	   this.current_token = prevToken;
  	   }
  	   exp = new InvalidExpression(msg);
  	   exp.setLocation(template, start.next, prevToken);
   }
   {
      return exp;
   }
}

Expression Exp() :
{
	Expression exp;
}
{
	 exp=OrExpression() {return exp;}
}

/**
 * Lowest level expression, a literal, a variable,
 * or a possibly more complex expression bounded
 * by parentheses.
 */
Expression PrimaryExpression() :
{
   Expression exp;
}
{
   (
      exp=NumberLiteral()
      |
      exp=HashLiteral()
      |
      exp=StringLiteral()
      |
      exp=BooleanLiteral()
      |
      exp=NullLiteral()
      |
      exp=ListLiteral()
      |
      exp=Identifier()
      |
      exp=Parenthesis()
      |
      exp=BuiltinVariable()
  )
  (
      LOOKAHEAD(<DOT>
                |<OPEN_BRACKET>
                |<OPEN_PAREN>
                |<BUILT_IN>
                |<EXISTS>
                |<EXCLAM>)
      exp=AddSubExpression(exp)
  )*
  {
     return exp;
  }
}

Expression Parenthesis() :
{
   Expression exp, result;
   Token start, end;
}
{
    start=<OPEN_PAREN>
    exp=Expression(start, CLOSE_PAREN, false) 
    end=<CLOSE_PAREN>
    {
       result = new ParentheticalExpression(exp);
       result.setLocation(template, start, end);
       return result;
    }
}

/**
 * A primary expression preceded by zero or
 * more unary operators. 
 */
Expression UnaryExpression() :
{
   Expression result;
}
{
  (
   result=UnaryPlusMinusExpression()
   |
   result=NotExpression()
   |
   result=PrimaryExpression()
  )
  {
     return result;
  }
}

Expression NotExpression() : 
{
   Token t;
   Expression exp, result=null;
   List<Token> nots = new ArrayList<Token>();
}
{
   (
      t=<EXCLAM> {nots.add(t);}
   )+
   exp=PrimaryExpression() 
   {
      for (int i=0; i<nots.size(); i++) {
         result = new NotExpression(exp);
         Token tok = nots.get(nots.size() -i -1);
         result.setLocation(template, tok, exp);
         exp = result;
      }
      return result;
   }
}

Expression UnaryPlusMinusExpression() :
{
   Expression exp, result;
   boolean isMinus = false;
   Token t;
}
{
   (
      t=<PLUS>
      |
      t=<MINUS> {isMinus = true;}
   )
   exp=PrimaryExpression() 
   {
      result = new UnaryPlusMinusExpression(exp, isMinus);  
      result.setLocation(template, t, exp);
      return result;
   }
}

Expression AdditiveExpression() :
{
   Expression lhs, rhs, result;
   boolean plus;
}
{
   lhs=MultiplicativeExpression() {result = lhs;}
   (
      LOOKAHEAD(<PLUS>|<MINUS>)
      (
        (
         <PLUS> {plus = true;}
         |
         <MINUS> {plus = false;}
        )
      )
      rhs=MultiplicativeExpression()
      {
         if (plus) {
           // plus is treated separately, since it is also
           // used for concatenation.
             result = new AddConcatExpression(lhs, rhs);
         }
         else {
             result = new ArithmeticExpression(lhs,
                                            rhs,
                                            ArithmeticExpression.SUBSTRACTION);
         }
         result.setLocation(template, lhs, rhs);
         lhs = result;
      }
   )*
   {
      return result;
   }
}

/**
 * A unary expression followed by zero or more
 * unary expressions with operators in between.
 */
Expression MultiplicativeExpression() :
{
   Expression lhs, rhs, result;
   int operation = ArithmeticExpression.MULTIPLICATION;
}
{
   lhs=UnaryExpression() {result = lhs;}
   (
      (
         <TIMES> {operation = ArithmeticExpression.MULTIPLICATION;}
         |
         <DIVIDE> {operation = ArithmeticExpression.DIVISION;}
         |
         <PERCENT>{operation = ArithmeticExpression.MODULUS;}
      )
      rhs=UnaryExpression()
      {
         result = new ArithmeticExpression(lhs, rhs, operation);
         result.setLocation(template, lhs, rhs);
         lhs = result;
      }
   )*
   {
      return result;
   }
}


Expression EqualityExpression() :
{
   Expression lhs, rhs, result;
   Token t;
}
{
   lhs=RelationalExpression() {result = lhs;}
   [
     (
      t=<NOT_EQUALS> 
      |
      t=<EQUALS> 
      |
      t=<DOUBLE_EQUALS>
     )
     rhs=RelationalExpression()
     {
        result = new ComparisonExpression(lhs, rhs, t.image);
        result.setLocation(template, lhs, rhs);
     }
   ]
   {
      return result;
   }
}

Expression RelationalExpression() :
{
   Expression lhs, rhs, result;
   Token t;
}
{
   lhs=RangeExpression() {result = lhs;}
   [
     (
      t=<GREATER_THAN_EQUALS>
      |
      t=<ESCAPED_GTE>
      |
      t=<GREATER_THAN>
      |
      t=<ESCAPED_GT>
      |
      t=<LESS_THAN_EQUALS>
      |
      t=<LESS_THAN>
     )
     rhs=RangeExpression()
     {
        result = new ComparisonExpression(lhs, rhs, t.image);
        result.setLocation(template, lhs, rhs);
     }
   ]
   {
      return result;
   }
}

Expression RangeExpression() :
{
   Expression lhs, rhs=null, result;
}
{
    lhs=AdditiveExpression() {result = lhs;}
    [
      <DOT_DOT>
       [
        LOOKAHEAD(AdditiveExpression())
        rhs=AdditiveExpression()
       ]
       {
           Range range = new Range(lhs, rhs);
           if (rhs != null) {
               range.setLocation(template, lhs, rhs);
           } else {
              range.setLocation(template, lhs, lhs);
           }
           result = range;
        }
    ]
    {
        return result;
    }
}




Expression AndExpression() :
{
   Expression lhs, rhs, result;
}
{
   lhs=EqualityExpression() {result = lhs;}
   (
      <AND>
      rhs=EqualityExpression()
      {
         result = new AndExpression(lhs, rhs);
         result.setLocation(template, lhs, rhs);
         lhs = result;
      }
   )*
   {
      return result;
   }
}

Expression OrExpression() :
{
   Expression lhs, rhs, result;
}
{
   lhs=AndExpression() {result = lhs;}
   (
      <OR>
      rhs=AndExpression()
      {
         result = new OrExpression(lhs, rhs);
         result.setLocation(template, lhs, rhs);
         lhs = result;
      }
   )*
   {
      return result;
   }
}

ListLiteral ListLiteral() :
{
   Expression exp;
   ArrayList<Expression> values = new ArrayList<Expression>();
   Token begin, end;
}
{
    begin=<OPEN_BRACKET>
    [
      exp=Exp() {values.add(exp);}
      (
         [<COMMA>]
         exp=Exp() {values.add(exp);}
      )*
    ]
    end=<CLOSE_BRACKET>
    {
        ListLiteral result = new ListLiteral(values);
        result.setLocation(template, begin, end);
        return result;
    }
}

Expression NumberLiteral() :
{
   Token op = null, t;
   Number number;
}
{
   (
      t=<INTEGER>
      |
      t=<DECIMAL>
   )
   {
       String s = t.image;
       Number n = template != null ? template.getArithmeticEngine().toNumber(s) : new java.math.BigDecimal(s);
       Expression result = new NumberLiteral(n);
       Token startToken = (op != null) ? op : t;
       result.setLocation(template, startToken, t);
       return result;
   }
}

Identifier Identifier() :
{
    Token t;
}
{
    t=<ID>
    {
        Identifier id = new Identifier(t.image);
        id.setLocation(template, t, t);
        return id;
    }
}

Expression IdentifierOrStringLiteral() :
{
   Expression exp;
}
{
   (
      exp=Identifier()
      |
      exp=StringLiteral()
   )
   {
      return exp;
   }   
}

BuiltinVariable BuiltinVariable() :
{
   Token dot, name;
}
{
   dot=<DOT>
   name=<ID>
   {
      BuiltinVariable result = null;
      try {
          result = new BuiltinVariable(name.image);
      } catch (ParseException pe) {
          pe.lineNumber = dot.beginLine;
          pe.columnNumber = dot.beginColumn;
          throw pe;
      }
      result.setLocation(template, dot, name);
      return result;
   }
}

/**
 * Production that builds up an expression
 * using the dot or dynamic key name
 * or the args list if this is a method invocation.
 */
Expression AddSubExpression(Expression exp) :
{
   Expression result = null;
}
{
     (
       result=DotVariable(exp)
       |
       result=DynamicKey(exp)
       |
       result=MethodArgs(exp)
       |
       result=BuiltIn(exp)
       |
       result=Exists(exp)
       |
       result=DefaultTo(exp)
     )
     {
        return result;
     }
}

Expression DefaultTo(Expression exp) :
{
   Expression rhs = null;
   Token t;
}
{
   
   (
       t=<EXCLAM>
       [
         LOOKAHEAD(PrimaryExpression(), {getToken(1).kind != ID || getToken(2).kind != EQUALS})
          rhs=PrimaryExpression()
       ]
   )
   {
      DefaultToExpression result = new DefaultToExpression(exp, rhs);
      if (rhs ==null) {
          result.setLocation(template, exp, t);
      }
      else {
          result.setLocation(template, exp, rhs);
      }
      return result;
   }
}

Expression Exists(Expression exp) :
{
   Token t;
}
{
   t=<EXISTS>
   {
       ExistsExpression result = new ExistsExpression(exp);
       result.setLocation(template, exp, t);
       return result;
   }
}



Expression BuiltIn(Expression exp) :
{
   Token t=null;
}
{
   <BUILT_IN>
   t=<ID>
   {
   	   BuiltInExpression result = new BuiltInExpression(exp, t.image);
   	   result.setLocation(template, exp, t);
   	   return result;
   }
}

/**
 * production for when a key is specified by <DOT> + keyname
 */
Expression DotVariable(Expression exp) :
{
  Token t;
}
{
     <DOT>{token_source.justAfterDot = true;}
     t=<ID>{token_source.justAfterDot = false;}
     {
         Dot dot = new Dot(exp, t.image);
         dot.setLocation(template, exp, t);
         return dot;
     }
}

/**
 * production for when the key is specified
 * in brackets.
 */
Expression DynamicKey(Expression exp) :
{
   Expression arg;
   Token t;
}
{
   <OPEN_BRACKET>
   arg=Exp()
   t=<CLOSE_BRACKET>
   {
       DynamicKeyName dkn = new DynamicKeyName(exp, arg);
       dkn.setLocation(template, exp, t);
       return dkn;
   }
}

/**
 * production for an arglist part of a method invocation.
 */
MethodCall MethodArgs(Expression exp) :
{
     ArgsList args = new PositionalArgsList();
     Token end;
}
{
     <OPEN_PAREN>
     [args=ArgsList()]
     end=<CLOSE_PAREN>
     {
        MethodCall result = new MethodCall(exp, args);
        result.setLocation(template, exp, end);
	args.setLocationInfoIfAbsent(result);        
        return result;
     }
}

Expression StringLiteral() :
{
  Token t;
  boolean raw = false;
}
{
   (
     t=<STRING_LITERAL>
     |
     t=<RAW_STRING> {raw = true;}
   )
   {
       String s = t.image;
       // Get rid of the quotes.
       s = s.substring(1, s.length() -1);
       if (raw) {
           s=s.substring(1);
       }
       else try {
          s = StringUtil.FTLStringLiteralDec(s);
       } catch (ParseException pe) {
       	  InvalidExpression invalid = new InvalidExpression("Malformed string literal: " + pe.getMessage());
       	  invalid.setLocation(template, t, t);
       	  return invalid;
       }
       StringLiteral result = new StringLiteral(s, raw);
       result.setLocation(template, t, t);
       return result;
   }
}

Expression BooleanLiteral() :
{
   Token t;
   Expression result;
}
{
   (
       t=<FALSE> {result = new BooleanLiteral(false);}
       |
       t=<TRUE> {result = new BooleanLiteral(true);}
   )
   {
       result.setLocation(template, t, t);
       return result;
   }
}

Expression NullLiteral() :
{
   Token t;
}
{
   t=<NULL>
   {
       Expression result = new NullLiteral();
       result.setLocation(template, t, t);
       return result;
   }
}


HashLiteral HashLiteral() :
{
   Token begin, end;
   Expression key, value;
   ArrayList<Expression> keys = new ArrayList<Expression>();
   ArrayList<Expression> values = new ArrayList<Expression>();
}
{
   begin=<OPEN_BRACE>
   [
       key=Exp()
       (<COMMA>|<COLON>)
       value=Exp()
       {
          keys.add(key);
          values.add(value);
       }
       (
          <COMMA>
           key=Exp()
           (<COMMA>|<COLON>)
           value=Exp()
           {
               keys.add(key);
               values.add(value);
           }
       )*
   ]
   end=<CLOSE_BRACE>
   {
      HashLiteral result = new HashLiteral(keys, values);
      result.setLocation(template, begin, end);
      return result;
   }
}

/**
 * A production representing the ${...}
 * that outputs a variable.
 */
TemplateElement StringOutput() :
{
   Expression exp;
   Token begin, end;
   boolean unclosed = false;
}
{
   begin=<OUTPUT_ESCAPE> 
   exp=Expression(begin, CLOSE_BRACE, false)
   try {
	   end=<CLOSE_BRACE>
   }
   catch (ParseException pe2) {
   	   end=recoverToToken(CLOSE_BRACE, true);
   	   exp=new InvalidExpression("The expression inside the interpolation is invalid.");
   	   exp.setLocation(template, begin.next, end);
   	   if (end.next.kind != EOF) {
	   	   end = end.next;
   	   } else {
   	   	   unclosed = true;
   	   }
   }
   {
   	  TemplateElement result;
   	  if (unclosed) {
   	  	  result = new UnclosedElement("Unclosed output interpolation, expecting a closing '}'");
   	  } else {
	      result = new Interpolation(exp);
   	  }
      result.setLocation(template, begin, end);
      return result;
   }
}

NumericalOutput NumericalOutput() :
{
   Expression exp;
   Token fmt = null, begin, end;
}
{
   begin=<NUMERICAL_ESCAPE>
   exp=Exp()
   [
      <SEMICOLON>
      fmt=<ID>
   ]
   end=<CLOSE_BRACE>
   {
   	  String formatString = fmt == null ? null : fmt.image;
      NumericalOutput result = new NumericalOutput(exp, formatString);
      result.setLocation(template, begin, end);
      return result;
   }
}

TemplateElement If() :
{
    Token start, end, t;
    Expression condition;
    TemplateElement block;
    IfBlock ifBlock;
    ConditionalBlock cblock;
}
{
   start=<IF>
   condition=Exp()
   <DIRECTIVE_END>
   block=OptionalBlock()
   {
      cblock = new ConditionalBlock(condition, block, true);
      cblock.setLocation(template, start, block);
      ifBlock = new IfBlock(cblock);
   }
   (
       t=<ELSE_IF>
       condition=Exp()
       LooseDirectiveEnd()
       block=OptionalBlock()
       {
          cblock = new ConditionalBlock(condition, block, false);
          cblock.setLocation(template, t, block);
          ifBlock.addBlock(cblock);
       }
   )*
   [
         t=<ELSE>
         block=OptionalBlock()
         {
            cblock = new ConditionalBlock(null, block, false);
            cblock.setLocation(template, t, block);
            ifBlock.addBlock(cblock);
         }
   ]
   end=CloseDirectiveBlock("if")
   {
       ifBlock.setLocation(template, start, end);
       return ifBlock;
   }
}

AttemptBlock Attempt() :
{
   Token start, end;
   TemplateElement block=null, recoveryBlock;
   ParseException problem = null;
}
{
   start=<ATTEMPT>
   block=OptionalBlock()
/*   
   try {
	   block=OptionalBlock()
   } catch (ParseException pe) {
   	   recoverToToken(RECOVER, false);
   	   problem = pe;
   } catch (LexicalException tme) {
   	   recoverToToken(RECOVER, false);
   	   problem = new ParseException(tme.getMessage());
   }*/
   recoveryBlock=Recover()
   end=CloseDirectiveBlock("attempt, recover")
   {
      AttemptBlock result = new AttemptBlock(block, recoveryBlock);
      result.setLocation(template, start, end);
      if (problem != null) {
      	ParsingProblem pp = new ParsingProblem(problem.getMessage(), result);
      	result.addParsingProblem(pp);
      }
      return result;
   }
}

RecoveryBlock Recover() : 
{
   Token start;
   TemplateElement block;
}
{
   start=<RECOVER>
   block=OptionalBlock()
   {
      RecoveryBlock result = new RecoveryBlock(block);
      result.setLocation(template, start, block);
      return result;
   }
}

TemplateElement List() :
{
    Expression exp;
    Token index, start, end, as=null, directiveEnd=null;
    TemplateElement block;
}
{
   start=<LIST> 
   exp=Expression(start, AS, false)
   <AS>
   index=<ID>
   <DIRECTIVE_END>
   block=OptionalBlock()
   end=CloseDirectiveBlock("list")
   {
     IteratorBlock result = new IteratorBlock(exp,
                                              index.image,
                                              block,
                                              false);
     result.setLocation(template, start, end);
     return result;
   }
}

IteratorBlock ForEach() :
{
     Expression exp;
     Token index, start, end;
     TemplateElement block;
}
{
   start=<FOREACH> 
   index=<ID>
   <IN>
   exp=Exp()
   <DIRECTIVE_END>
   block=OptionalBlock()
   end=CloseDirectiveBlock("foreach")
   {
     IteratorBlock result = new IteratorBlock(exp,
                                              index.image,
                                              block,
                                              true);
     result.setLocation(template, start, end);
     return result;
   }
}

VisitNode Visit() :
{
   Token start, end;
   Expression targetNode, namespaces=null;
}
{
   start=<VISIT>
   targetNode=Exp()
   [
       <USING>
       namespaces=Exp()
   ]
   end=LooseDirectiveEnd()
   {
       VisitNode result = new VisitNode(targetNode, namespaces);
       result.setLocation(template, start, end);
       return result;
   }
}

RecurseNode Recurse() :
{
   Token start, end = null;
   Expression node=null, namespaces=null;
}
{
   (
      start=<SIMPLE_RECURSE>
      |
      (
         start=<RECURSE>
         [
            node=Exp()
         ]
         [
            <USING>
            namespaces=Exp()
         ]
         end=LooseDirectiveEnd()
      )
   )
   {
       if (end == null) end = start;
       RecurseNode result = new RecurseNode(node, namespaces);
       result.setLocation(template, start, end);
       return result;
   }
}

FallbackInstruction FallBack() :
{
   Token tok;
}
{
   tok=<FALLBACK>
   {
      FallbackInstruction result = new FallbackInstruction();
      result.setLocation(template, tok, tok);
      return result;
   }
}

/**
 * Production used to break out of a loop or a switch block.
 */
BreakInstruction Break() :
{
   Token start;
}
{
    start=<BREAK>
    {
       BreakInstruction result = new BreakInstruction();
       result.setLocation(template, start, start);
       return result;
    }
}

/**
 * Production used to jump out of a macro.
 * The stop instruction terminates the rendering of the template.
 */
ReturnInstruction Return() :
{
   Token start, end=null;
   Expression exp = null;
}
{
   (
      start=<SIMPLE_RETURN>{end = start;}
      |
      start=<RETURN> exp=Exp() end=LooseDirectiveEnd()
   )
   {
      ReturnInstruction result = new ReturnInstruction(exp);
      result.setLocation(template, start, end);
      return result;
   }
}

StopInstruction Stop() :
{
   Token start = null;
   Expression exp = null;
}
{
    (
      start=<HALT>
      |
      start=<STOP> exp=Exp() LooseDirectiveEnd()
    )
    {
       StopInstruction result = new StopInstruction(exp);
       result.setLocation(template, start, start);
       return result;
    }
}

TemplateElement Nested() :
{
  Token t, end;
  PositionalArgsList args=null;
  BodyInstruction result = null;
}
{
   (
      (
         t=<SIMPLE_NESTED>
         {
            result = new BodyInstruction(null);
            result.setLocation(template, t, t);
         }
      )
      |
      (
          t=<NESTED>
          args=PositionalArgsList()
          end=LooseDirectiveEnd()
          {
             result = new BodyInstruction(args);
             result.setLocation(template, t, end);
          }
      )
   )
   {
       return result;
   }
}

TemplateElement Flush() :
{
  Token t;
}
{
   t=<FLUSH>
   {
       FlushInstruction result = new FlushInstruction();
       result.setLocation(template, t, t);
       return result;
   }
}

TemplateElement Trim() :
{
  Token t;
  TrimInstruction result=null;
}
{
   (
     t=<TRIM> {result = new TrimInstruction(true, true);}
     |
     t=<LTRIM> {result = new TrimInstruction(true, false);}
     |
     t=<RTRIM> {result = new TrimInstruction(false, true);}
     |
     t=<NOTRIM> {result = new TrimInstruction(false, false);}
   )
   {
       result.setLocation(template, t, t);
       return result;
   }
}

TemplateElement Assign() :
{
   Token start, end;
   int type;
   Token id=null;
   Expression nameExp, exp, nsExp=null;
   String varName;
   TemplateElement block;
   LinkedHashMap<String, Expression> assignments = new LinkedHashMap<String, Expression>();
   String assignmentType;
   AssignmentInstruction result;
}
{
    (
      start=<ASSIGN> {type = AssignmentInstruction.NAMESPACE; assignmentType="assign";}
      |
      start=<GLOBALASSIGN>{type = AssignmentInstruction.GLOBAL; assignmentType = "global";}
      |
      start=<LOCALASSIGN> {type = AssignmentInstruction.LOCAL; assignmentType = "local";}
      |
      start=<SET> {type = AssignmentInstruction.SET; assignmentType = "set";}
    )
    {result = new AssignmentInstruction(type);}
    nameExp=IdentifierOrStringLiteral()
    {
       varName = (nameExp instanceof StringLiteral) ? ((StringLiteral) nameExp).getAsString() : nameExp.toString();
    }
    ((
       <EQUALS>
       exp=Exp() {assignments.put(varName, exp);}
       (
         LOOKAHEAD([<COMMA>](<ID>|<STRING_LITERAL>)<EQUALS>)
            [<COMMA>]
            nameExp=IdentifierOrStringLiteral()
            {
               varName = (nameExp instanceof StringLiteral) ? ((StringLiteral) nameExp).getAsString() : nameExp.toString();
            }
            <EQUALS>
            exp=Exp()
            {
            	assignments.put(varName, exp);
            } 
       )*
       [
          id=<IN>
          nsExp=Exp() {if (type != AssignmentInstruction.SET && type != AssignmentInstruction.NAMESPACE) {
          	   ParsingProblem problem = new ParsingProblem("Can only assign to namespace with #set or #assign.", result);
          	   template.addParsingProblem(problem);
            } 
          }
       ]
       end=LooseDirectiveEnd()
       {
           result.setNamespaceExp(nsExp);
		   for (Map.Entry<String,Expression> entry : assignments.entrySet()) {
           	    result.addAssignment(entry.getKey(), entry.getValue());
           }
           result.setLocation(template, start, end);
           return result;
       }
    )
    |
    (
       [
          id=<IN>
          nsExp=Exp() {if (type != AssignmentInstruction.NAMESPACE && type != AssignmentInstruction.SET) throw new ParseException(getErrorStart(id) + "\nCannot assign to namespace here.", id.beginLine, id.beginColumn);}
       ]
       <DIRECTIVE_END>
       block=OptionalBlock()
       end=CloseDirectiveBlock(assignmentType)
       {
       	  String name = end.image.substring(3, end.image.length() -1);
       	  switch (type) {
       	   	   case AssignmentInstruction.LOCAL : if (name.length() >0 && !name.equals("local")) throw new ParseException(getErrorStart(end) + "\nMismatched assignment tags.", end.beginLine, end.beginColumn); break;
       	   	   case AssignmentInstruction.NAMESPACE : if (name.length() >0 && !name.equals("assign")) throw new ParseException(getErrorStart(end) + "\nMismatched assignment tags.", end.beginLine, end.beginColumn); break;
       	   	   case AssignmentInstruction.GLOBAL : if (name.length() >0 && !name.equals("global")) throw new ParseException(getErrorStart(end) + "\nMismatched assignment tags.", end.beginLine, end.beginColumn); break;
       	   	   case AssignmentInstruction.SET : if (name.length() >0 && !name.equals("set")) throw new ParseException(getErrorStart(end) + "\nMismatched assignment tags.", end.beginLine, end.beginColumn); break;
       	  }
          BlockAssignment ba = new BlockAssignment(block, varName, type, nsExp);
          ba.setLocation(template, start, end);
          return ba;
       }
    ))
}


Include Include() :
{
   Token att, start, end;
   Expression nameExp, exp, parseExp = null, encodingExp = null;
   boolean freshNamespace;
}
{
    (
        start=<_INCLUDE> {freshNamespace = false;}
        |
        start=<EMBED> {freshNamespace=true;}
    )
    nameExp=Exp()
    [<SEMICOLON>]
    (
	  att=<ID>
	  <EQUALS>
	  exp=Exp()
	  {
	     String attString = att.image;
	     if (attString.equalsIgnoreCase("parse")) {
	        if (parseExp != null) {
	           String msg = getErrorStart(att)
	                 + "\nparse may not be specified more than once.";
	           throw new ParseException(msg, att.beginLine, att.beginColumn);
	        }
	        parseExp = exp;
	     }
	     else if (attString.equalsIgnoreCase("encoding")) {
	        if (encodingExp != null) {
	           String msg = getErrorStart(att)
	                 + "\nencoding may not be specified more than once.";
	           throw new ParseException(msg, att.beginLine, att.beginColumn);
	        }
	        encodingExp = exp;
	     }
	     else {
	         String msg = getErrorStart(att)
	               + "\nexpecting parse= or encoding= to be specified.";
	         throw new ParseException(msg, att.beginLine, att.beginColumn);
	     }
	  }
	)*
    end=LooseDirectiveEnd()
    {
       Include result = new Include(template, nameExp, freshNamespace, encodingExp, parseExp);
       result.setLocation(template, start, end);
       return result;
    }
}

LibraryLoad Import() :
{
   Token start, end, ns;
   Expression nameExp;
}
{
   start=<IMPORT>
   nameExp=Exp()
   <AS>
   ns=<ID>
   end=LooseDirectiveEnd()
   {
       LibraryLoad result = new LibraryLoad(template, nameExp, ns.image);
       result.setLocation(template, start, end);
       if (template != null) template.addImport(result);
       return result;
   }
}

ParameterList ParameterList() :
{
	Token arg=null, firstArg=null, ellipsis = null;
	Expression defValue = null;
	ParameterList result = new ParameterList();
	String catchAll = null;
	boolean isCatchAll = false, hasDefaults = false;
	Set<String> paramNames = new HashSet<String>();
}
{
    (
          arg=<ID> 
          {
          	if (firstArg == null) firstArg = arg;
          	defValue = null;
          	if (paramNames.contains(arg.image)) {
          		throw new ParseException(getErrorStart(arg) + "\nThe parameter " + arg.image + " cannot be repeated.");
          	}
          	paramNames.add(arg.image);
          }
          [
             ellipsis=<ELLIPSIS> { isCatchAll = true; }
          ]
          [
            <EQUALS>
          	defValue=Exp()
            {
		      hasDefaults = true;
            }
          ]
          [<COMMA>]
	  {
          if (catchAll != null) {
              throw new ParseException(getErrorStart(arg)
                + "\nThere may only be one \"catch-all\" parameter in a macro declaration, "
                + "and it must be the last parameter.", arg.beginLine, arg.endLine);
          }
          if (isCatchAll) {
              if (defValue != null) {
                  throw new ParseException(getErrorStart(arg)
                    + "\n\"Catch-all\" macro parameter may not have a default value.",
                    arg.beginLine, arg.endLine);
              }
              result.setCatchAll(arg.image);
          } 
          else if (defValue == null) {
             if (hasDefaults) {
                  throw new ParseException(getErrorStart(arg)
                    + "\nIn a macro declaration, parameters without a default value "
                    + "must all occur before the parameters with default values.",
                    arg.beginLine, arg.endLine);
             }
          	 result.addParam(arg.image);
          }
          else {
              result.addParam(arg.image, defValue);
          	  hasDefaults = true;
          }
	  }
    )*
	{
		if (ellipsis != null) {
			result.setLocation(template, firstArg, ellipsis);
		}
		else if (defValue != null) {
			result.setLocation(template, firstArg, defValue);
		}
		else if (firstArg != null) {
			result.setLocation(template, firstArg, arg);
		}
		return result;
	}
}

Param Param() :
{
	Token start, end;
	Expression nameExp;
	String name;
	ParameterList params;
	TemplateElement block;
}
{
	start=<PARAM>
	nameExp=IdentifierOrStringLiteral()
	 
	{
       name = (nameExp instanceof StringLiteral) ? ((StringLiteral) nameExp).getAsString() : nameExp.toString();
	}
    [<OPEN_PAREN>]
    params=ParameterList() 
    [<CLOSE_PAREN>]
    (
      end=<EMPTY_DIRECTIVE_END>
      |
      (
         <DIRECTIVE_END>
         block=OptionalBlock()
         end=CloseDirectiveBlock("param")
      )
    )
	{
		return null;
	}
}

Macro Macro() :
{
   CodeSource codeSource = Template.NULL_CODE_SOURCE;
   if (template != null) codeSource = template.getCodeSource();
   Macro result = new Macro(codeSource);
   Token arg, start, end;
   Expression nameExp;
   String name;
   TemplateElement block;
   ParameterList params;
   String functionOrMacro;
}
{
    (
        start=<MACRO> {functionOrMacro = "macro";}
        |
        start=<FUNCTION> {result.setFunction(true); functionOrMacro = "function";}
    )
    nameExp=IdentifierOrStringLiteral()
    {
       name = (nameExp instanceof StringLiteral) ? ((StringLiteral) nameExp).getAsString() : nameExp.toString();
       result.setName(name);
    }
    [<OPEN_PAREN>]
    params=ParameterList() {result.setParams(params);}
    [<CLOSE_PAREN>]
    <DIRECTIVE_END>
    block=OptionalBlock()
    end=CloseDirectiveBlock(functionOrMacro)
    {
	   result.setName(name);
	   result.setNestedBlock(block);
       result.setLocation(template, start, end);
       return result;
    }
}


CompressedBlock Compress() :
{
   TemplateElement block;
   Token start, end;
}
{
    start=<COMPRESS>
    block=OptionalBlock()
    end=CloseDirectiveBlock("compress")
    {
       CompressedBlock cb = new CompressedBlock(block);
       cb.setLocation(template, start, end);
       return cb;
    }
}


PositionalArgsList PositionalArgsList() : 
{
	Expression firstArg=null, arg=null;
	PositionalArgsList result = new PositionalArgsList();
}
{
	firstArg=Exp() {result.addArg(firstArg); arg=firstArg;}
	(
	   [<COMMA>]
	   arg=Exp() {result.addArg(arg);}
	)*
	{
		if (firstArg != null)
		result.setLocation(template, firstArg, arg);
		return result;
	}
}

NamedArgsList NamedArgsList() :
{
	Token firstParam, id;
	Expression arg;
	NamedArgsList result = new NamedArgsList();
}
{
	firstParam=<ID>
	<EQUALS> 
	arg=Exp()  
	{
		result.addNamedArg(firstParam.image, arg);
	}
	(
	   [<COMMA>]
	   id=<ID>
	   <EQUALS>
	   arg=Exp()
	   {result.addNamedArg(id.image, arg);}
	)*
	{
		token_source.inInvocation = false;
		result.setLocation(template, firstParam, arg);
		return result;
	}
}

ArgsList ArgsList() :
{
	ArgsList result = null;
	Token id;
	Expression exp = null;
}
{
	(
	   LOOKAHEAD(<ID><EQUALS>)
       result=NamedArgsList()
       |
       result=PositionalArgsList()
    )
	{
		return result;
	}
}



TemplateElement UnifiedMacroTransform() :
{
   Token start=null, end, t;
   Map<String, Expression> namedArgs = null;
   ArrayList<Expression> positionalArgs = null;
   String directiveName = null;
   TemplateElement nestedBlock = null;
   Expression exp;
   UnifiedCall result = new UnifiedCall();
   ArgsList args = null;
   ParameterList bodyParameters = null;
}
{
    start=<UNIFIED_CALL>
    exp=Exp()
    {
        if (exp instanceof Identifier || (exp instanceof Dot && ((Dot) exp).onlyHasIdentifiers())) {
           directiveName = exp.getCanonicalForm();
	    }
	    result.setNameExp(exp);
    }
    [<TERMINATING_WHITESPACE>]
    [args=ArgsList()]
    {
        if(args == null)
        {
            args = new EmptyArgsList();
        }
        result.setArgs(args);
    }
    [
       <SEMICOLON>[<TERMINATING_WHITESPACE>]
       bodyParameters=ParameterList()
       {
           result.setBodyParameters(bodyParameters);
       }
    ]
    (
      end=<EMPTY_DIRECTIVE_END>
      |
      (
        <DIRECTIVE_END>
		nestedBlock=OptionalBlock()
		end=<UNIFIED_CALL_END>
		{
           String s=end.image.substring(2);;
           if (s.charAt(0) == '@') {
              s = s.substring(1);
           }
	       s = s.substring(0, s.length() -1).trim();
           if (s.length() >0 && !s.equals(directiveName)) {
           String msg = getErrorStart(end);
           if (directiveName == null) {
                throw new ParseException(msg + "\nExpecting </@>", end.beginLine, end.beginColumn);
	       }
	       else {
	           throw new ParseException(msg + "\nExpecting </@> or </@" + directiveName + ">", end.beginLine, end.beginColumn);
	       }
	    }
	    result.setNestedBlock(nestedBlock);
	  }
      )
    )
    {
       result.setLocation(template, start, end);
       return result;
    }
}

TemplateElement Call() :
{
   Token start, end;
   Identifier id;
   String macroName= null;
   UnifiedCall result = new UnifiedCall();
   ArgsList args = null;
}
{
    start=<CALL>
    id=Identifier() {result.setNameExp(id);}
    [
	    LOOKAHEAD(1)
	    <OPEN_PAREN>
	]
    args=ArgsList() {result.setArgs(args);}
    [<CLOSE_PAREN>]
    end=LooseDirectiveEnd()
    {
       result.setLocation(template, start, end);
       args.setLocationInfoIfAbsent(result);
       return result;
    }
}

Map<String, Expression> NamedArgs() :
{
    Map<String, Expression> result = new LinkedHashMap<String, Expression>();
    Token t;
    Expression exp;
}
{
  (
     t=<ID>
     <EQUALS>
     exp=Exp()
     {
        if (result.containsKey(t.image)) {
           throw new ParseException(getErrorStart(t)
              + "\nValue of named parameter '" + t.image
              + "' may only be specified once.", t.beginLine, t.endLine);
        }
        result.put(t.image, exp);
     }
  )+
  {
     return result;
  }
}

Comment TerseComment() :
{
	Token start, end, t;
	StringBuilder buf = new StringBuilder();
}
{
	start=<TERSE_COMMENT>
	(
	   t=<PRINTABLE_CHARS> {buf.append(t.image);}
	)*
	end=<TERSE_COMMENT_END>
	{
		Comment result = new Comment(buf.toString());
		result.setLocation(template, start, end);
		return result;
	}
}

Comment Comment() :
{
   Token start, end, t;
   StringBuilder buf = new StringBuilder();
}
{
    start=<COMMENT>
    (
       t=<PRINTABLE_CHARS> {buf.append(t.image);}
    )*
    end=<COMMENT_END>
    {
       Comment result = new Comment(buf.toString());
       result.setLocation(template, start, end);
       return result;
    }
}

NoParseBlock NoParse() :
{
   Token start, end, t;
   StringBuilder buf = new StringBuilder();
}
{
    start=<NOPARSE>
    (
       t=<PRINTABLE_CHARS> {buf.append(t.image);}
    )*
    end=<NOPARSE_END>
    {
    	int beginColumn = start.beginColumn;
    	int beginLine = start.beginLine;
    	char lastChar = 0;
    	for (char c : start.image.toCharArray()) {
    		switch (c) {
    			case '\n' : if (lastChar == '\r') break;
    			case '\r' : beginColumn = 1; beginLine++; break;   
    			default : ++beginColumn;
    		}
    		lastChar = c;
    	}
       	List<TextBlock> text = TextBlock.breakIntoBlocks(buf.toString(), template, beginColumn, beginLine);
        NoParseBlock result = new NoParseBlock(start.image, end.image, text);
        result.setLocation(template, start, end);
        return result;
    }
}


TransformBlock Transform() :
{
   Token start, end, argName;
   Expression exp, argExp;
   TemplateElement content = null;
   HashMap<String, Expression> args = null;
}
{
    start=<TRANSFORM>
    exp=Exp()
    [<SEMICOLON>]
    (
       argName=<ID>
       <EQUALS>
       argExp=Exp()
       {
           if (args == null) args = new HashMap<String, Expression>();
           args.put(argName.image, argExp);
       }
    )*
    (
       end=<EMPTY_DIRECTIVE_END>
       |
       (
          <DIRECTIVE_END>
          content=OptionalBlock()
          end=CloseDirectiveBlock("transform")
       )
    )
    {
       TransformBlock result = new TransformBlock(exp, args, content);
       result.setLocation(template, start, end);
       return result;
    }
}

SwitchBlock Switch() :
{
    SwitchBlock switchBlock;
    Case caseIns;
    Expression switchExp;
    Token start, end;
    boolean defaultFound = false;
}
{
   start=<SWITCH>
   switchExp=Exp()
   <DIRECTIVE_END>
   (<WHITESPACE>|Comment())*   
   {
      switchBlock = new SwitchBlock(switchExp);
   }
   (
     LOOKAHEAD(2)
     caseIns=Case()
     {
       if (caseIns.isDefault()) {
	   if (defaultFound) {
                String msg = getErrorStart(start)
                            + "\nYou can only have one default case in a switch statement";
                throw new ParseException(msg, start.beginLine, start.beginColumn);
	   }
	   defaultFound = true;
	}
        switchBlock.addCase(caseIns);
     }
   )*
   end=CloseDirectiveBlock("switch")
   {
      switchBlock.setLocation(template, start, end);
      return switchBlock;
   }
}

Case Case() :
{
    Expression exp = null;
    TemplateElement block;
    boolean isDefault = false;
    Token start;
}
{
   (
      start=<CASE>exp=Exp()<DIRECTIVE_END>
      |
      start=<DEFAUL>{isDefault = true;}
   )
   block=OptionalBlock()
   {
       Case result = new Case(exp, block, isDefault);
       result.setLocation(template, start, block);
       return result;
   }
}

TrimBlock TrimBlock() :
{
	Token start, end;
	TemplateElement content;
	boolean left = false, right = false;
	String closeTag = null;
}
{
	(
	   start=<BLOCKTRIM> {closeTag = "t_lines"; left = right = true;}
	   |
	   start=<BLOCKTRIML> {closeTag = "lt_lines"; left = true;}
	   |
	   start=<BLOCKTRIMR> {closeTag = "rt_lines"; right = true;}
	   |
	   start=<BLOCKNOTRIM> {closeTag = "nt_lines";}
	) 
	{trimBlockNesting++;}
	content=OptionalBlock()
	end=CloseDirectiveBlock(closeTag)
	{
		TrimBlock result = new TrimBlock(content, left, right);
		result.setLocation(template, start, end);
		trimBlockNesting--;
		return result;
	}
}
	

EscapeBlock Escape() :
{
    Token variable, start, end;
    Expression escapeExpr;
    TemplateElement content;
}
{
    start=<ESCAPE>
    variable=<ID>
    <AS>
    escapeExpr=Exp()
    <DIRECTIVE_END>
    {
        EscapeBlock result = new EscapeBlock(variable.image, escapeExpr);
    }
    content=OptionalBlock()
    {
        result.setContent(content);
    }
    end=CloseDirectiveBlock("escape")
    {
       result.setLocation(template, start, end);
       return result;
    }
}

NoEscapeBlock NoEscape() :
{
    Token start, end;
    TemplateElement content;
}
{
    start=<NOESCAPE>
    content=OptionalBlock()
    end=CloseDirectiveBlock("noescape")
    {
       NoEscapeBlock result = new NoEscapeBlock(content);
       result.setLocation(template, start, end);
       return result;
    }
}


Token CloseDirectiveBlock(String expectedTags) :
{
	Token t;
}
{
    t=<CLOSE_DIRECTIVE_BLOCK>
	{
		String name = t.image;
		name = name.substring(3, name.length() -1);
		if (name.length()>0) {
			StringTokenizer st = new StringTokenizer(expectedTags, ", ");
			boolean found = false;
			while (st.hasMoreTokens()) {
				if (st.nextToken().equals(name.trim())) found = true;
			}
			if (!found) {
				throw new ParseException(getErrorStart(t) + " Expecting " + t.image.substring(0,3) + expectedTags + t.image.charAt(t.image.length() -1));
			}
		}
		return t;
	}
}


/**
 * Production to terminate potentially empty elements. Either a ">" or "/>"
 */

Token LooseDirectiveEnd() :
{
    Token t;
}
{
   (
      t=<DIRECTIVE_END>
      |
      t=<EMPTY_DIRECTIVE_END>
   )
   {
      return t;
   }
}

PropertySetting Setting() :
{
   Token start, end, key;
   Expression value;
}
{
   start=<SETTING>
   key=<ID>
   <EQUALS>
   value=Exp()
   end=LooseDirectiveEnd()
   {
      PropertySetting result = new PropertySetting(key.image, value);
      result.setLocation(template, start, end);
      return result;
   }
}

VarDirective Var() :
{
    Token start, end;
    Expression var, valueExp = null;
    VarDirective result = new VarDirective();
}
{
   start=<VAR>
   (
     var=IdentifierOrStringLiteral()
     [
       <EQUALS>
       valueExp=Exp()
     ]
   )
   {
      result.addVar(var, valueExp);
      valueExp = null;
   }
   (
      (
        [<COMMA>]
        var=IdentifierOrStringLiteral()
        [
           <EQUALS>
           valueExp=Exp()
        ]
      )
      {
         result.addVar(var, valueExp);
         valueExp = null;
      }
   )*
   end=LooseDirectiveEnd()
   {
      result.setLocation(template, start, end);
      return result;
   }
}

/**
 * A production for FreeMarker directives.
 */
TemplateElement FreemarkerDirective() :
{
   TemplateElement tp;
}
{
   (
     tp=If()
     |
     tp=List()
     |
     tp=ForEach()
     |
     tp=Assign()
     |
     tp=Include()
     |
     tp=Import()
     |
     tp=Macro()
     |
     tp=Compress()
     |
     tp=UnifiedMacroTransform()
     |
     tp=Call()
     |
     tp=TerseComment()
     |
     tp=Comment()
     |
     tp=NoParse()
     |
     tp=Transform()
     |
     tp=Switch()
     |
     tp=Setting()
     |
     tp=Var()
     |
     tp=Break()
     |
     tp=Return()
     |
     tp=Stop()
     |
     tp=Flush()
     |
     tp=Trim()
     |
     tp=Nested()
     |
     tp=Escape()
     |
     tp=NoEscape()
     |
     tp=TrimBlock()
     |
     tp=Visit()
     |
     tp=Recurse()
     |
     tp=FallBack()
     |
     tp=Attempt()
   )
   {
      return tp;
   }
}

/**
 * Production for a block of raw text
 * i.e. text that contains no
 * FreeMarker directives.
 */

List<TextBlock> PCData() :
{
    StringBuilder buf = new StringBuilder();
    Token t=null, start=null, prevToken = null;
    List<TextBlock> result = new ArrayList<TextBlock>();
}
{
    (
      LOOKAHEAD(<WHITESPACE>|<PRINTABLE_CHARS>) 
      (
         {prevToken = t;}         
         t=<PRINTABLE_CHARS> 
         |
         t=<WHITESPACE> 
      )
      {
         buf.append(t.image);
         if (start == null) start = t;
         if (prevToken != null) prevToken.next = null;
      }
    )+
    {
         if (stripText && contentNesting == 1) {
             result.add(TextBlock.EMPTY_BLOCK);
             return result;
         }
    	 if (trimBlockNesting>0) {
    		result = TextBlock.breakIntoBlocksLineByLine(buf.toString(), template, start.beginColumn, start.beginLine); 
    	 } else {
            result = TextBlock.breakIntoBlocks(buf.toString(), template, start.beginColumn, start.beginLine);
    	 }
         return result;
    }
}

/**
 * Production for dealing with unparsed content,
 * i.e. what is inside a comment or noparse tag.
 * It returns the ending token. The content
 * of the tag is put in buf.
 */

TemplateElement Content() :
{
    MixedContent nodes = new MixedContent();
    TemplateElement elem=null, begin=null;
    contentNesting++;
    List<TextBlock> text = null;
}
{
    (
      LOOKAHEAD(1) // Just tells javacc that we know what we're doing.
      (
         text=PCData() {elem = null;}
         |
         elem=StringOutput()
         |
         elem=NumericalOutput()
         |
         elem=FreemarkerDirective()
      )
      {
            if (begin == null) {
               begin = elem == null ? text.get(0) : elem;
            }
            if (elem == null) {
            	for (TextBlock tb : text) nodes.addElement(tb);
            } else {
            	nodes.addElement(elem);
            }
      }
    )+
    {
        contentNesting--;
        if (elem == null) elem = text.get(text.size() -1);
        nodes.setLocation(template, begin, elem);
	    return nodes;
    }
}

/**
 * A production freemarker text that may contain
 * ${...} and #{...} but no directives.
 */

TemplateElement FreeMarkerText() :
{
     MixedContent nodes = new MixedContent();
     TemplateElement elem = null, begin = null;
     List<TextBlock> text = null;
}
{
    (
      (
        text=PCData() {elem = null;}
        |
        elem=StringOutput()
        |
        elem=NumericalOutput()
      )
      {
         if (begin == null) {
            begin = (elem == null) ? text.get(0) : elem;
         }
         if (elem != null) {
         	nodes.addElement(elem);
         } else {
         	for (TextBlock tb : text) nodes.addElement(tb);
         }
      }
    )+
    {
       if (elem == null) elem = text.get(text.size() -1);
       nodes.setLocation(template, begin, elem);
       return nodes;
    }
}

/**
 * A production for a block of optional content.
 * Returns an empty Text block if there is no
 * content.
 */

TemplateElement OptionalBlock() :
{
   TemplateElement tp = TextBlock.EMPTY_BLOCK;
}
{
   [
      LOOKAHEAD(1) // has no effect but to get rid of a spurious warning.
         tp=Content()
   ]
   {
      return tp;
   }
}


TemplateHeaderElement HeaderElement() : 
{
	Token key, start, end;
	Expression exp;
	Map<String,Expression> params = new LinkedHashMap<String,Expression>();
}
{
   [<WHITESPACE>]
   (
     start=<TRIVIAL_FTL_HEADER> {end=start;}
     |
     (
       start=<FTL_HEADER>
       (
          key=<ID>
          <EQUALS>
          exp=Exp() {params.put(key.image.toLowerCase(), exp);}
       )*
       end=LooseDirectiveEnd()
     )
   )
   {
   	   TemplateHeaderElement header = new TemplateHeaderElement(params);
   	   header.setLocation(template, start, end);
   	   return header;
   }
}

Map<String,Expression> ParamList() :
{
   Identifier id;
   Expression exp;
   Map<String,Expression> result = new HashMap<String,Expression>();
}
{
   (
      id=Identifier()
      <EQUALS>
      exp=Exp() {result.put(id.toString(), exp);}
      [<COMMA>]
   )+
   {
       return result;
   }
}


/**
 * Root production to be used when parsing
 * an entire file.
 */
TemplateElement Root() :
{
   TemplateHeaderElement header;
   TemplateElement doc;
}
{
   [
      LOOKAHEAD([<WHITESPACE>](<TRIVIAL_FTL_HEADER>|<FTL_HEADER>))
       header=HeaderElement()
       {
       	   template.setHeaderElement(header);
       	   String templateEncoding = template.getEncoding();
       	   if (templateEncoding != null && header.hasParameter("encoding")) {
       	   	  String encoding = null;
       	   	  try {
       	   	     encoding = header.getStringParameter("encoding");
       	   	  } catch (Exception e) {}
       	   	  if (encoding != null && !encoding.equals(templateEncoding)) {
       	   	  	throw new Template.WrongEncodingException(encoding);
       	   	  }
       	   }
       	   if (header.hasParameter("strip_text")) {
       	   	  try {
       	   	  	 this.stripText = header.getBooleanParameter("strip_text");
       	   	  } catch (Exception e) {
       	   	  	throw new ParseException(e.getMessage());
       	   	  }
       	   }
       	   	
       }
   ]
   doc=OptionalBlock()
   <EOF>
   {
       doc.setParentRecursively(null);
       return doc;
   }
}

<EXPRESSION, NO_SPACE_EXPRESSION> TOKEN:
{
   <ID: <LETTER>(<PART_LETTER>)*>
   |   
   <#LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "$",
         "@",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06fa"-"\u06fc",
         "\u0710",
         "\u0712"-"\u072c",
         "\u0780"-"\u07a5",
         "\u0905"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17b3",
         "\u17db",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
  |
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "@",
         "a"-"z",
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}


