PARSER_PACKAGE="freemarker.core.parser";
TREE_BUILDING_ENABLED=false;
EXTRA_TOKENS=DIRECTIVE_END;

/**
 * The lexer portion defines 3 lexical states:
 * DEFAULT, EXPRESSION, DIRECTIVE_NAME
 * The lexer is in the DEFAULT state when it is 
 * just consuming regular text, but is scanning for
 * FreeMarker constructs. 
 * DIRECTIVE_NAME is a trivial state you are in just
 * after a <# or [# and we expect a directive name.
 * EXPRESSION is the state you are in
 * when the parser wants a FreeMarker expression.
 * So, for example, you enter the EXPRESSION state
 * right after a ${ and leave it after the matching }.
 * Or, you enter the EXPRESSION state right after
 * an "<#if" and then, when you hit the matching ">"
 * that ends the if directive, you go back to DEFAULT lexical state.
 */

INJECT LEXER_CLASS : 
   import static freemarker.template.utility.StringUtil.isFTLIdentifier;
{
    /**
    Keeps track of how deeply nested
    we have the hash literals.
    This is necessary since we need to be
    able to distinguish the } used to close
    a hash literal and the one used to
    close a ${
    */
    private int hashLiteralNesting;
    private int parenthesisNesting;
    private int bracketNesting;
    private boolean inPointySyntax;
    // Not being used now. FIXME later.
    @Property boolean onlyTextOutput;
    String templateName;

    private EnumSet<TokenType> directiveNames = EnumSet.of(
        _ATTEMPT, _RECOVER, IF, ELSE_IF, LIST, FOREACH, SWITCH,
        CASE, ASSIGN, GLOBALASSIGN, LOCALASSIGN, SET, _INCLUDE,
        IMPORT, FUNCTION, _MACRO, VISIT, STOP, RETURN, SETTING, 
        EMBED, VAR, ELSE, BREAK, FLUSH, TRIM, LTRIM, RTRIM,
        DEFAUL, NESTED, RECURSE, FALLBACK, ESCAPE, NOESCAPE, 
        FTL_HEADER, UNKNOWN_DIRECTIVE
    );

    private EnumSet<TokenType> emptyDirectives = EnumSet.of(
        _ATTEMPT, _RECOVER, ELSE, BREAK, FLUSH, TRIM, LTRIM, 
        RTRIM, DEFAUL, FALLBACK, NOESCAPE 
    );

    private boolean atLineStart(Token tok) {
        for (int i = tok.getBeginOffset() -1; i >= 0; i--) {
            int ch = charAt(i);
            if (ch == '\n') break;
            if (!Character.isWhitespace(ch)) return false;
        }
        return true;
    }

    private boolean atLineEnd(Token tok) {
        for (int i = tok.getEndOffset(); i < length(); i++) {
            int ch = charAt(i);
            if (ch == '\n') break;
            if (!Character.isWhitespace(ch)) return false;
        }
        return true;
    }

    private TokenType directiveTypeFromString(String name) {
        switch(name) {
            case "#assign" : return ASSIGN;
            case "#attempt" : return _ATTEMPT;
            case "#break" : return BREAK;
            case "#case" : return CASE;
            case "#default" : return DEFAUL;
            case "#embed" : return EMBED;
            case "#escape" : return ESCAPE;
            case "#else" : return ELSE;
            case "#elseif" : return ELSE_IF;
            case "#fallback" : return FALLBACK;
            case "#flush" : return FLUSH;
            case "#foreach" : return FOREACH;
            case "#ftl" : return FTL_HEADER;
            case "#function" : return FUNCTION;
            case "#global" : return GLOBALASSIGN;
            case "#if" : return IF;
            case "#import" : return IMPORT;
            case "#include" : return _INCLUDE;
            case "#list" : return LIST;
            case "#local" : return LOCALASSIGN;
            case "#macro" : return _MACRO;
            case "#nested" : return NESTED;
            case "#noescape" : return NOESCAPE;
            case "#recover" : return _RECOVER;
            case "#recurse" : return RECURSE;
            case "#return" : return RETURN;
            case "#set" : return SET;
            case "#setting" : return SETTING;
            case "#stop" : return STOP;
            case "#switch" : return SWITCH;
            case "#var" : return VAR;
            case "#visit" : return VISIT;
        }
        return UNKNOWN_DIRECTIVE;
    }

    private Token TOKEN_HOOK(Token token) {
        TokenType type = token.getType();
        if (type == POSSIBLE_DIRECTIVE) {
            if (!atLineStart(token)) return token;
            TokenType directiveType = directiveTypeFromString(token.toString());
            if (emptyDirectives.contains(directiveType) && !atLineEnd(token)) {
                return token;
            }
            token.setType(directiveType);
            if (directiveType == UNKNOWN_DIRECTIVE) return token;
            if (!emptyDirectives.contains(directiveType)) {
                switchTo(LexicalState.EXPRESSION);
                activeTokenTypes.add(EOL);
            }
        }
        else if (type == POSSIBLE_END_DIRECTIVE) {
            if (!atLineStart(token) && !atLineEnd(token)) return token;
            token.setType(CLOSE_DIRECTIVE_BLOCK);
        }
        else if (type == EOL) {
            token.setType(DIRECTIVE_END);
            activeTokenTypes.remove(EOL);
            switchTo(LexicalState.DEFAULT);
        }
        return token;
    }

    private Token TOKEN_HOOK(Token token) {
        if (directiveNames.contains(token.getType())) {
            inPointySyntax = token.charAt(0) == '<';
            if (emptyDirectives.contains(token.getType())) {
                switchTo(LexicalState.DEFAULT);
            }
            else {
                switchTo (LexicalState.EXPRESSION);
            }
        }
        switch(token.getType()) {
            case GREATER_THAN_EQUALS : 
            case GREATER_THAN : 
                if (parenthesisNesting == 0 && inPointySyntax && !activeTokenTypes.contains(EOL)) {
                    if (token.getType() == GREATER_THAN_EQUALS) {
                        token.truncate(1);
                    }
                    token.setType(DIRECTIVE_END);
                    switchTo(LexicalState.DEFAULT);
                }
                break;
            case OPEN_PAREN : 
                parenthesisNesting++;
                break;
            case CLOSE_PAREN :
                parenthesisNesting--;
                break;
            case OPEN_BRACKET : 
                bracketNesting++;
                break;
            case CLOSE_BRACKET : 
                if (bracketNesting > 0) {
                    --bracketNesting;
                } else if (!activeTokenTypes.contains(EOL)){
                    token.setType(DIRECTIVE_END);
                    switchTo(LexicalState.DEFAULT);
                }
                break;
            case OPEN_BRACE : 
                ++hashLiteralNesting;
                break;
            case CLOSE_BRACE : 
                if (hashLiteralNesting > 0) {
                    --hashLiteralNesting;
                } else {
                    switchTo(LexicalState.DEFAULT);
                }
                break;
            case UNIFIED_CALL : 
                switchTo(LexicalState.EXPRESSION);
                break;
        }
        return token;
    }
}

UNPARSED :
    <?COMMENT : ("<#--" | "[#--") (~[])* ("--]" | "-->")>
;

MORE :
    <START_TAG : "<#" | "[#"> : DIRECTIVE_NAME
;    

TOKEN :
    <CLOSE_DIRECTIVE_BLOCK : ("[/#" (["a"-"z"])* "]") | ("</#" (["a"-"z"])* ">")> 
    |
    <UNIFIED_CALL : "<@" | "[@" > 
    |
    <UNIFIED_CALL_END : ("<" | "[") "/@" (~[" ", "\t", "\n", "\r", ">", "]"])* (">" | "]")> 
    |
    <OUTPUT_ESCAPE : "${" > : EXPRESSION
    |
    <?NOPARSE : <NOPARSE_BEGIN> (~[])* <NOPARSE_END> > #LegacyNoParse
    |
    <#NOPARSE_BEGIN :   ("<#noparse" (<BLANK>)* ">") | ("/#noparse" (<BLANK>)* "]")>
    |
    <#NOPARSE_END :  ("</#noparse" (<BLANK>)* ">") | ("[/#noparse" (<BLANK>)* "]")>
;

TOKEN#Text :
    <TRAILING_WHITESPACE : (["\t"," "])* "\n"> #freemarker.core.nodes.Whitespace
    |
    <NON_TRAILING_WHITESPACE : (["\t"," "])+> #freemarker.core.nodes.Whitespace
    |
    <PROBLEMATIC_CHAR : "$" | "<" | "["> #Printable
    |
    <POSSIBLE_DIRECTIVE : "#" (["a"-"z","A"-"Z"])+> #Printable
    |
    <POSSIBLE_END_DIRECTIVE : "/#" (["a"-"z","A"-"Z"])*> #Printable
    |
    <REGULAR_PRINTABLE : (~["$", "<", "[" ,"\t", " ", "\n"])+> #Printable
;

<DIRECTIVE_NAME> TOKEN#DirectiveName :
    <#BLANK : [" ", "\t", "\n", "\r"]>
    |
    <#CLOSE_TAG1 : (<BLANK>)* (">" | "]")>
    |
    <#CLOSE_TAG2 : (<BLANK>)* ("/")? (">" | "]")>
    |
    <ASSIGN : "assign">
    |
    <_ATTEMPT : "attempt" <CLOSE_TAG1>> 
    |
    <BREAK : "break" <CLOSE_TAG2>> 
    |
    <CASE : "case"> 
    |
    <DEFAUL : "default" <CLOSE_TAG1>> 
    |
    <ELSE : "else" <CLOSE_TAG2>> 
    |
    <ELSE_IF : "elseif">
    |
    <EMBED : "embed"> 
    |
    <ESCAPE : "escape" > 
    |
    <FALLBACK : "fallback" <CLOSE_TAG2>> 
    |
    <FLUSH : "flush" <CLOSE_TAG2>> 
    |
    <FOREACH : "foreach"> 
    |
    <FTL_HEADER : "ftl">
    |
    <FUNCTION : "function"> 
    |
    <GLOBALASSIGN : "global" > 
    |
    <IF : "if"> 
    |
    <IMPORT : "import"> 
    |
    <_INCLUDE : "include"> 
    |
    <LIST : "list"> 
    |
    <LOCALASSIGN : "local"> 
    |
    <LTRIM : "lt" <CLOSE_TAG2>> 
    |
    <_MACRO : "macro">
    |
    <NESTED : "nested"> 
    |
    <NOESCAPE : "noescape" <CLOSE_TAG1>> 
    |
    <_RECOVER : "recover" <CLOSE_TAG1>>
    |
    <RECURSE : "recurse">
    |
    <RETURN : "return"> 
    |
    <RTRIM : "rt" <CLOSE_TAG2>> 
    |
    <SET : "set">
    |
    <SETTING : "setting"> 
    |
    <STOP : "stop"> 
    |
    <SWITCH : "switch">
    |
    <TRIM : "t" <CLOSE_TAG2>> 
    |
    <VAR : "var">
    |
    <VISIT : "visit"> 
    |
    <UNKNOWN_DIRECTIVE : (["a"-"z","A"-"Z"])+>
;

<EXPRESSION> TOKEN :
    <EOL : "\n">
;

<EXPRESSION> SKIP :
    <IGNORED_WS : " " | "\t" | "\n" | "\r" >
    |
    <?EXPRESSION_COMMENT1 : "<#--" (~[])* "-->">
    |
    <?EXPRESSION_COMMENT2 : "[#--" (~[])* "--]">
;

<EXPRESSION> TOKEN :
  <STRING_LITERAL :
      ("\"" 
          ((~["\\", "\""]) | ("\\" ~[]))*      
      "\"")
      |
      ("'"
          ((~["\\", "'"]) | ("\\" ~[]))*            
      "'")
  > 
  |
  <RAW_STRING : "r" (("\"" (~["\""])* "\"") | ("'" (~["'"])* "'"))>
  |
  <FALSE : "false">
  |
  <TRUE : "true">
  |
  <NULL : "null">
  |
  <INTEGER : (["0"-"9"])+>
  |
  <DECIMAL : <INTEGER> "." <INTEGER>>
  |
  <DOT : ".">
  |
  <DOT_DOT : "..">
  |
  <BUILT_IN : "?">
  |
  <EXISTS : "??">
  |
  <EQUALS : "=">
  |
  <DOUBLE_EQUALS : "==">
  |
  <NOT_EQUALS : "!=">
  |
  <GREATER_THAN : ">">
  |
  <GREATER_THAN_EQUALS: ">=">
  |
  <EMPTY_DIRECTIVE_END : "/>" | "/]"> : DEFAULT
  |
  <LESS_THAN : "lt" | "<" | "&lt;">
  |
  <LESS_THAN_EQUALS : "lte" | "<=" | "&lt;=">
  |
  <ESCAPED_GT: "gt" | "\\gt" |  "&gt;">
  |
  <ESCAPED_GTE : "gte" | "\\gte" | "&gt;=">
  |
  <PLUS : "+">
  |
  <MINUS : "-">
  |
  <TIMES : "*">
  |
  <DOUBLE_STAR : "**">
  |
  <ELLIPSIS : "...">
  |
  <DIVIDE : "/">
  |
  <PERCENT : "%">
  |
  <AND : "&" | "&&" >
  |
  <OR : "|" | "||">
  |
  <EXCLAM : "!">
  |
  <COMMA : ",">
  |
  <SEMICOLON : ";">
  |
  <COLON : ":">
  |
  <OPEN_BRACKET : "[">
  |
  <CLOSE_BRACKET : "]"> 
  |
  <OPEN_PAREN : "("> 
  |
  <CLOSE_PAREN : ")"> 
  |
  <OPEN_BRACE : "{" > 
  |
  <CLOSE_BRACE : "}" >
  |
  <IN : "in">
  |
  <AS : "as">
  |
  <USING : "using">
;

INCLUDE JAVA_IDENTIFIER_DEF

<EXPRESSION> TOKEN:
   <ID: ("@"|<JAVA_IDENTIFIER_START>)("@"|<JAVA_IDENTIFIER_PART>)*> #Identifier
;

INJECT Identifier :
    import freemarker.template.TemplateException;
    import freemarker.core.Environment;
    implements Expression
{
    public Object evaluate(Environment env) {
        if (env == null) {
            throw new TemplateException("Variables are not available "
            + "(certainly you are in a parse-time executed directive). The name of the variable "
            + "you tried to read: " + this, null);
        }
        return env.getVariable(toString());
    }

    public Expression _deepClone(String name, Expression subst) {
        if(this.toString().equals(name)) {
        	return subst.deepClone(null, null);
        }
        return this; 
    }
}

