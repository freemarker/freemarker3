PARSER_PACKAGE="freemarker.core.parser";
TREE_BUILDING_ENABLED=false;
EXTRA_TOKENS=DIRECTIVE_END;

/**
 * The lexer portion defines 4 lexical states:
 * DEFAULT, NO_PARSE, EXPRESSION, DIRECTIVE_NAME
 * The lexer is in the DEFAULT state when it is 
 * just consuming regular text, but are scanning for
 * FreeMarker constructs. NO_PARSE is the simplest state.
 * We are consuming text, but ignoring FreeMarker constructs,
 * so ${x} or [#if..] are just treated as plain text.
 * EXPRESSION is the state you are in
 * when the parser wants a FreeMarker expression.
 * So, for example, you enter the EXPRESSION state
 * right after a ${ and leave it after the matching }.
 * Or, you enter the EXPRESSION state right after
 * an "<#if" and then, when you hit the matching ">"
 * that ends the if directive, you go back to DEFAULT lexical state.
 * Note that whitespace is ignored in the
 * EXPRESSION state but is passed through to the parser as PCDATA 
 * in the DEFAULT state. 
 */

INJECT LEXER_CLASS : 
   import static freemarker.template.utility.StringUtil.isFTLIdentifier;
{
    /**
    The noparseType is set when we enter
    a block of text that the parser more or less ignores.
    These are <noparse> and <comment>. This variable
    tells us what the closing tag should be, and when
    we hit that, we resume parsing. Note that with this
    scheme, <comment> and <noparse> tags cannot nest
    recursively, but it is not clear how important that is.
    */
    private TokenType noparseType;
    /**
    Keeps track of how deeply nested
    we have the hash literals.
    This is necessary since we need to be
    able to distinguish the } used to close
    a hash literal and the one used to
    close a ${
    */
    private int hashLiteralNesting;
    private int parenthesisNesting;
    private int bracketNesting;
    boolean onlyTextOutput;//, justAfterDot;
    private boolean inPointySyntax;
    String templateName;

    public void setOnlyTextOutput(boolean b) {
        this.onlyTextOutput = b;
    }

    private EnumSet<TokenType> directiveNames = EnumSet.of(
        _ATTEMPT, _RECOVER, IF, ELSE_IF, LIST, FOREACH, SWITCH,
        CASE, ASSIGN, GLOBALASSIGN, LOCALASSIGN, SET, _INCLUDE,
        IMPORT, FUNCTION, _MACRO, VISIT, STOP, RETURN,
        SETTING, EMBED, VAR, NOPARSE, ELSE,
        BREAK, SIMPLE_RETURN, HALT, FLUSH, TRIM, LTRIM, RTRIM,
        DEFAUL, SIMPLE_NESTED, NESTED, SIMPLE_RECURSE, RECURSE,
        FALLBACK, ESCAPE, NOESCAPE, FTL_HEADER, TRIVIAL_FTL_HEADER,
        UNKNOWN_DIRECTIVE
    );

    private EnumSet<TokenType> emptyDirectives = EnumSet.of(
        _ATTEMPT, _RECOVER, VISIT, NOPARSE, 
        ELSE, BREAK, SIMPLE_RETURN, HALT, FLUSH, TRIM, LTRIM, 
        RTRIM, DEFAUL, SIMPLE_NESTED, SIMPLE_RECURSE, FALLBACK, 
        NOESCAPE, TRIVIAL_FTL_HEADER 
    );

    private BASE_TOKEN_CLASS TOKEN_HOOK(BASE_TOKEN_CLASS token) {
        if (directiveNames.contains(token.getType())) {
            inPointySyntax = token.charAt(0) == '<';
            if (emptyDirectives.contains(token.getType())) {
                switchTo(LexicalState.DEFAULT);
            }
            else {
                switchTo (LexicalState.EXPRESSION);
            }
        }
        switch(token.getType()) {
            case GREATER_THAN_EQUALS : 
            case GREATER_THAN : 
                if (parenthesisNesting == 0 && inPointySyntax) {
                    if (token.getType() == GREATER_THAN_EQUALS) {
                        token.truncate(1);
                    }
                    token.setType(DIRECTIVE_END);
                    switchTo(LexicalState.DEFAULT);
                }
                break;
            case OPEN_PAREN : 
                parenthesisNesting++;
                switchTo(LexicalState.EXPRESSION);
                break;
            case CLOSE_PAREN :
                parenthesisNesting--;
                break;
            case OPEN_BRACKET : 
                bracketNesting++;
                break;
            case CLOSE_BRACKET : 
                if (bracketNesting > 0) {
                    --bracketNesting;
                } else {
                    token.setType(DIRECTIVE_END);
                    switchTo(LexicalState.DEFAULT);
                }
                break;
            case OPEN_BRACE : 
                ++hashLiteralNesting;
                break;
            case CLOSE_BRACE : 
                if (hashLiteralNesting > 0) {
                    --hashLiteralNesting;
                } else {
                    switchTo(LexicalState.DEFAULT);
                }
                break;
            case UNIFIED_CALL : 
                switchTo(LexicalState.EXPRESSION);
                break;
            case NOPARSE : 
                noparseType = NOPARSE;
                switchTo(LexicalState.NO_PARSE);
                break;
            case NOPARSE_END : 
                if (noparseType != NOPARSE) {
                    token.setType(TEXT);
                    break;
                }
                else {
                    switchTo(LexicalState.DEFAULT);
                }
                break;
        }
        return token;
    }
}

SKIP :
    <?COMMENT : ("<#--" | "[#--") (~[])* ("--]" | "-->")>
;

MORE :
    <START_TAG : "<#" | "[#"> : DIRECTIVE_NAME
;    

TOKEN :
    <CLOSE_DIRECTIVE_BLOCK : ("[/#" (~["]"])* "]") | ("</#" (~[">"])* ">")> 
    |
    <UNIFIED_CALL : "<@" | "[@" > 
    |
    <UNIFIED_CALL_END : ("<" | "[") "/@" (~[" ", "\t", "\n", "\r", ">", "]"])* (">" | "]")> 
    |
    <TEXT : "\n" | (("$" | "<" | "[" ) | (~["$", "<", "[" ,"\n"])+ ("\n")?)> #Text
//    <TEXT : ("$" | "<" | "[" ) | (~["$", "<", "["])+ > #Text
    |
    <OUTPUT_ESCAPE : "${" > : EXPRESSION
;

INJECT Text :
{
    public String getOutputText() {
        String text = getSource();
        boolean isOutputtingLine = checkForOutputOnLine();
        if (hasOpeningWS()) {
            if (!isOutputtingLine || checkForExplicitLeftTrim()) {
                text = leftTrim(text);
            }
        } 
        if (hasTrailingWS()) {
            if (!isOutputtingLine || checkForExplicitRightTrim()) {
                text = rightTrim(text);
            } 
        }
        return text;
    }

    public boolean isAllWhitespace() {
        return toString().trim().length() == 0;
    }

    public boolean hasOpeningWS() {
        return getBeginColumn() == 1 && (charAt(0) == '\t' || charAt(0) == ' ');
    }

    public boolean hasTrailingWS() {
        //if (previousSibling() != null) return false;
        int lastChar = charAt(length() -1);
        if (getEndOffset() >= getTokenSource().length()) {
            return lastChar == '\t' || lastChar == ' ' || lastChar == '\n';
        }
        return lastChar == '\n';
    }

    private boolean checkForExplicitLeftTrim() {
        Token tok = nextCachedToken();
        while (tok != null && tok.getBeginLine() == this.getBeginLine()) {
            if (tok.getType() == TRIM || tok.getType() == LTRIM) {
                return true;
            }
            tok = tok.nextCachedToken();
        }
        return false;
    }

    private boolean checkForExplicitRightTrim() {
        Token tok = previousCachedToken();
        while (tok != null && tok.getBeginLine() == this.getBeginLine()) {
            if (tok.getType() == TRIM || tok.getType() == RTRIM) {
                return true;
            }
            tok = tok.previousCachedToken();
        }
        return false;
    }

    private boolean checkForOutputOnLine() {
        if (!isAllWhitespace() || spansLine()) return true;
        if (previousSibling() == null) {
            Token tok = previousCachedToken();
            while (tok != null && tok.getEndLine() == getBeginLine()) {
                if (tok.firstAncestorOfType(Macro.class) != this.firstAncestorOfType(Macro.class)) {
                    tok = tok.previousCachedToken();
                    continue;
                }
                if (tok.getType() == CLOSE_BRACE && tok.getParent() instanceof Interpolation) {
                    return true;
                }
                if (tok instanceof Text) {
                    if (!((Text) tok).isAllWhitespace()) {
                        return true;
                    }
                } 
                tok = tok.previousCachedToken();
            }
        }
        if (nextSibling() == null)  {
            Token tok = nextCachedToken();
            while (tok != null && tok.getBeginLine() == getBeginLine()) {
                if (tok.firstAncestorOfType(Macro.class) != this.firstAncestorOfType(Macro.class)) {
                    tok = tok.nextCachedToken();
                    continue;
                }
                if (tok.getType() == OUTPUT_ESCAPE) {
                    return true;
                }
                if (tok instanceof Text) {
                    if (!((Text) tok).isAllWhitespace()) {
                        return true;
                    }
                }
                tok = tok.nextCachedToken();
            }
        }
        return false;
    }

    private boolean spansLine() {
        return getBeginColumn() == 1 && charAt(length()-1) == '\n';
    }

    private String leftTrim(String s) {
        for (int i = 0; i<s.length(); i++) {
            char c = s.charAt(i);
            if (c != '\t' && c!= ' ') {
                return s.substring(i);
            }
        }
        return "";
    }

    private String rightTrim(String s) {
        for (int i = s.length() -1; i>=0; i--) {
            char c = s.charAt(i);
            if (c != '\t' && c!=' ' && c != '\n') {
                return s.substring(0,i);
            }
        }
        return "";
    }
}

<DIRECTIVE_NAME> TOKEN :
    <#BLANK : [" ", "\t", "\n", "\r"]>
    |
    <#CLOSE_TAG1 : (<BLANK>)* (">" | "]")>
    |
    <#CLOSE_TAG2 : (<BLANK>)* ("/")? (">" | "]")>
    |
    <_ATTEMPT : "attempt" <CLOSE_TAG1>> 
    |
    <_RECOVER : "recover" <CLOSE_TAG1>>
    |
    <IF : "if" <BLANK>> 
    |
    <ELSE_IF : "elseif" <BLANK>>
    |
    <LIST : "list" <BLANK>> 
    |
    <FOREACH : "foreach" <BLANK>> 
    |
    <SWITCH : "switch" <BLANK>>
    |
    <CASE : "case" <BLANK>> 
    |
    <ASSIGN : "assign" <BLANK>>
    |
    <GLOBALASSIGN : "global" <BLANK>> 
    |
    <LOCALASSIGN : "local" <BLANK>> 
    |
    <SET : "set" <BLANK>>
    |
    <_INCLUDE : "include" <BLANK>> 
    |
    <IMPORT : "import" <BLANK>> 
    |
    <FUNCTION : "function" <BLANK>> 
    |
    <_MACRO : "macro" <BLANK>>
    |
    <VISIT : "visit" <BLANK>> 
    |
    <STOP : "stop" <BLANK>> 
    |
    <RETURN : "return" <BLANK>> 
    |
    <SETTING : "setting" <BLANK>> 
    |
    <EMBED : "embed" <BLANK>> 
    |
    <VAR : "var"  <BLANK>>
    |
    <NOPARSE : "noparse" <CLOSE_TAG1>> 
    |
    <ELSE : "else" <CLOSE_TAG2>> 
    |
    <BREAK : "break" <CLOSE_TAG2>> 
    |
    <SIMPLE_RETURN : "return" <CLOSE_TAG2>>
    |
    <HALT : "stop" <CLOSE_TAG2>> 
    |
    <FLUSH : "flush" <CLOSE_TAG2>> 
    |
    <TRIM : "t" <CLOSE_TAG2>> 
    |
    <LTRIM : "lt" <CLOSE_TAG2>> 
    |
    <RTRIM : "rt" <CLOSE_TAG2>> 
    |
    <DEFAUL : "default" <CLOSE_TAG1>> 
    |
    <SIMPLE_NESTED : "nested" <CLOSE_TAG2>> 
    |
    <NESTED : "nested" <BLANK>> 
    |
    <SIMPLE_RECURSE : "recurse" <CLOSE_TAG2>>
    |
    <RECURSE : "recurse" <BLANK>>
    |
    <FALLBACK : "fallback" <CLOSE_TAG2>> 
    |
    <ESCAPE : "escape" <BLANK>> 
    |
    <NOESCAPE : "noescape" <CLOSE_TAG1>> 
    |
    <FTL_HEADER : "ftl" <BLANK>>
    |
    <TRIVIAL_FTL_HEADER : "ftl" <CLOSE_TAG2>> 
    |
    <UNKNOWN_DIRECTIVE : (["a"-"z","A"-"Z", "_"])+>
;


<EXPRESSION> SKIP :
    < ( " " | "\t" | "\n" | "\r" )+ >
    |
    <?EXPRESSION_COMMENT1 : "<#--" (~[])* "-->">
    |
    <?EXPRESSION_COMMENT2 : "[#--" (~[])* "--]">
;

<EXPRESSION> TOKEN :
  <STRING_LITERAL :
      ("\"" 
          ((~["\\", "\""]) | ("\\" ~[]))*      
      "\"")
      |
      ("'"
          ((~["\\", "'"]) | ("\\" ~[]))*            
      "'")
  > 
  |
  <RAW_STRING : "r" (("\"" (~["\""])* "\"") | ("'" (~["'"])* "'"))>
  |
  <FALSE : "false">
  |
  <TRUE : "true">
  |
  <NULL : "null">
  |
  <INTEGER : (["0"-"9"])+>
  |
  <DECIMAL : <INTEGER> "." <INTEGER>>
  |
  <DOT : ".">
  |
  <DOT_DOT : "..">
  |
  <BUILT_IN : "?">
  |
  <EXISTS : "??">
  |
  <EQUALS : "=">
  |
  <DOUBLE_EQUALS : "==">
  |
  <NOT_EQUALS : "!=">
  |
  <GREATER_THAN : ">">
  |
  <GREATER_THAN_EQUALS: ">=">
  |
  <EMPTY_DIRECTIVE_END : "/>" | "/]"> : DEFAULT
  |
  <LESS_THAN : "lt" | "<" | "&lt;">
  |
  <LESS_THAN_EQUALS : "lte" | "<=" | "&lt;=">
  |
  <ESCAPED_GT: "gt" | "\\gt" |  "&gt;">
  |
  <ESCAPED_GTE : "gte" | "\\gte" | "&gt;=">
  |
  <PLUS : "+">
  |
  <MINUS : "-">
  |
  <TIMES : "*">
  |
  <DOUBLE_STAR : "**">
  |
  <ELLIPSIS : "...">
  |
  <DIVIDE : "/">
  |
  <PERCENT : "%">
  |
  <AND : "&" | "&&" >
  |
  <OR : "|" | "||">
  |
  <EXCLAM : "!">
  |
  <COMMA : ",">
  |
  <SEMICOLON : ";">
  |
  <COLON : ":">
  |
  <OPEN_BRACKET : "[">
  |
  <CLOSE_BRACKET : "]"> 
  |
  <OPEN_PAREN : "("> 
  |
  <CLOSE_PAREN : ")"> 
  |
  <OPEN_BRACE : "{" > 
  |
  <CLOSE_BRACE : "}" >
  |
  <IN : "in">
  |
  <AS : "as">
  |
  <USING : "using">
;

<NO_PARSE> MORE:  <(~[])> ;

<NO_PARSE> TOKEN :
    <NOPARSE_END : ("</#noparse" (<BLANK>)* ">") | ("[/#noparse" (<BLANK>)* "]")>
;

INCLUDE JAVA_IDENTIFIER_DEF

<EXPRESSION> TOKEN:
   <ID: ("@"|<JAVA_IDENTIFIER_START>)("@"|<JAVA_IDENTIFIER_PART>)*>
;
